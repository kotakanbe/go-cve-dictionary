package models

import (
	"testing"
)

func Test_FetchMeta(t *testing.T) {
	var tests = []struct {
		in       FetchMeta
		outdated bool
	}{
		{
			in: FetchMeta{
				SchemaVersion: 1,
			},
			outdated: true,
		},
		{
			in: FetchMeta{
				SchemaVersion: LatestSchemaVersion,
			},
			outdated: false,
		},
	}

	for i, tt := range tests {
		if aout := tt.in.OutDated(); tt.outdated != aout {
			t.Errorf("[%d] outdated expected: %#v\n  actual: %#v\n", i, tt.outdated, aout)
		}
	}
}

func TestCveDetail_HasJvn(t *testing.T) {
	type fields struct {
		Nvds []Nvd
		Jvns []Jvn
	}
	tests := []struct {
		name   string
		fields fields
		want   bool
	}{
		{
			name: "Jvn 0-slice",
			fields: fields{
				Nvds: []Nvd{{CveID: "CVE-2020-0930"}},
				Jvns: []Jvn{},
			},
			want: false,
		},
		{
			name: "Nvd 0-slice",
			fields: fields{
				Nvds: []Nvd{},
				Jvns: []Jvn{{CveID: "CVE-2020-0930"}},
			},
			want: true,
		},
		{
			name: "Jvn nil",
			fields: fields{
				Nvds: []Nvd{{CveID: "CVE-2020-0930"}},
				Jvns: nil,
			},
			want: false,
		},
		{
			name: "Nvd nil",
			fields: fields{
				Nvds: nil,
				Jvns: []Jvn{{CveID: "CVE-2020-0930"}},
			},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := CveDetail{
				Nvds: tt.fields.Nvds,
				Jvns: tt.fields.Jvns,
			}
			if got := c.HasJvn(); got != tt.want {
				t.Errorf("CveDetail.hasJvn() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestCveDetail_HasNvd(t *testing.T) {
	type fields struct {
		Nvds []Nvd
		Jvns []Jvn
	}
	tests := []struct {
		name   string
		fields fields
		want   bool
	}{
		{
			name: "Jvn 0-slice",
			fields: fields{
				Nvds: []Nvd{{CveID: "CVE-2020-0930"}},
				Jvns: []Jvn{},
			},
			want: true,
		},
		{
			name: "Nvd 0-slice",
			fields: fields{
				Nvds: []Nvd{},
				Jvns: []Jvn{{CveID: "CVE-2020-0930"}},
			},
			want: false,
		},
		{
			name: "Jvn nil",
			fields: fields{
				Nvds: []Nvd{{CveID: "CVE-2020-0930"}},
				Jvns: nil,
			},
			want: true,
		},
		{
			name: "Nvd nil",
			fields: fields{
				Nvds: nil,
				Jvns: []Jvn{{CveID: "CVE-2020-0930"}},
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := CveDetail{
				Nvds: tt.fields.Nvds,
				Jvns: tt.fields.Jvns,
			}
			if got := c.HasNvd(); got != tt.want {
				t.Errorf("CveDetail.hasNvd() = %v, want %v", got, tt.want)
			}
		})
	}
}
