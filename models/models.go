package models

import (
	"fmt"
	"strings"
	"time"

	"github.com/fatih/color"
	"github.com/jinzhu/gorm"
)

// FeedMeta has meta information about fetched feeds
type FeedMeta struct {
	gorm.Model `json:"-"`

	URL              string
	Hash             string
	LastModifiedDate string

	LatestHash             string `json:"-" gorm:"-"`
	LatestLastModifiedDate string `json:"-" gorm:"-"`
}

// UpToDate checks whether last fetched feed is up to date
func (f FeedMeta) UpToDate() bool {
	return !f.Newly() && f.Hash == f.LatestHash
}

// OutDated checks whether last fetched feed is out dated
func (f FeedMeta) OutDated() bool {
	return !f.Newly() && f.Hash != f.LatestHash
}

// Newly checks whether not fetched yet
func (f FeedMeta) Newly() bool {
	return f.Hash == ""
}

// StatusForStdout returns a status of fetched feed
func (f FeedMeta) StatusForStdout() string {
	if f.Newly() {
		return "Newly"
	} else if f.OutDated() {
		red := color.New(color.FgRed, color.Bold).SprintFunc()
		return red("Out-Dated")
	} else if f.UpToDate() {
		return color.GreenString("Up-to-Date")
	}
	return "Unknown"
}

const (
	nvd = "NVD"
	jvn = "JVN"
)

func (f FeedMeta) color(str string) string {
	if f.OutDated() {
		return color.WhiteString(str)
	} else if f.UpToDate() {
		return color.HiBlackString(str)
	}
	return str
}

func (f FeedMeta) source() string {
	if strings.Contains(f.URL, "nvdcve-1.1-") {
		return nvd
	} else if strings.Contains(f.URL, "jvndb") {
		return jvn
	}
	return "Unknown"
}

// FetchOption returns a option of fetch subcommand for list subcommand
func (f FeedMeta) FetchOption() string {
	switch f.source() {
	case nvd:
		return "fetchnvd"
	case jvn:
		return "fetchjvn"
	default:
		return ""
	}
}

// Year returns year, whether xml or not of the feed
func (f FeedMeta) Year() (year string, xml bool, err error) {
	switch f.source() {
	case nvd:
		return strings.TrimSuffix(
			strings.Split(f.URL, "nvdcve-1.1-")[1], ".json.gz"), false, nil
	case jvn:
		if strings.HasSuffix(f.URL, "jvndb.rdf") {
			return "modified", true, nil
		} else if strings.HasSuffix(f.URL, "jvndb_new.rdf") {
			return "recent", true, nil
		} else {
			return strings.TrimSuffix(
				strings.Split(f.URL, "jvndb_")[1], ".rdf"), true, nil
		}
	default:
		return "", false, fmt.Errorf("Failed to parse URL: %s", f.URL)
	}
}

func (f FeedMeta) modifiedTimesToStr() (fetched, latest string) {
	switch f.source() {
	case nvd:
		layout := "2006-01-02T15:04:05-07:00"
		last, _ := time.Parse(layout, f.LastModifiedDate)
		latest, _ := time.Parse(layout, f.LatestLastModifiedDate)
		return last.Format("2006/1/2-15:04"),
			latest.Format("2006/1/2-15:04")
	case jvn:
		layout := "2006/01/02 15:04:05"
		last, _ := time.Parse(layout, f.LastModifiedDate)
		latest, _ := time.Parse(layout, f.LatestLastModifiedDate)
		return last.Format("2006/1/2-15:04"),
			latest.Format("2006/1/2-15:04")
	default:
		return "Unknown", "Unknown"
	}
}

// ToTableWriterRow generate data for table writer
func (f FeedMeta) ToTableWriterRow() []string {
	y, _, _ := f.Year()
	fetched, latest := f.modifiedTimesToStr()
	return []string{
		f.color(f.source()),
		f.color(y),
		f.StatusForStdout(),
		f.color(fetched),
		f.color(latest),
	}
}

// CveDetail is a parent of Jnv/Nvd model
type CveDetail struct {
	CveID string
	Nvd   *Nvd
	Jvn   *Jvn
}

// IsNvd returns true if NVD contents
func (c CveDetail) IsNvd() bool {
	return c.Nvd != nil && c.Nvd.ID != 0
}

// IsJvn returns true if JVN contents
func (c CveDetail) IsJvn() bool {
	return c.Jvn != nil && c.Jvn.ID != 0
}

// Components common to Nvd and Jvn
// Cvss2 has CVSS Version 2 info
type Cvss2 struct {
	VectorString          string
	AccessVector          string
	AccessComplexity      string
	Authentication        string
	ConfidentialityImpact string
	IntegrityImpact       string
	AvailabilityImpact    string
	BaseScore             float64
	Severity              string
}

// Cvss3 has CVSS Version 3 info
type Cvss3 struct {
	VectorString          string
	AttackVector          string
	AttackComplexity      string
	PrivilegesRequired    string
	UserInteraction       string
	Scope                 string
	ConfidentialityImpact string
	IntegrityImpact       string
	AvailabilityImpact    string
	BaseScore             float64
	BaseSeverity          string
	ExploitabilityScore   float64
	ImpactScore           float64
}

// CpeBase has common args of Cpe and EnvCpe
type CpeBase struct {
	URI             string
	FormattedString string
	WellFormedName  string `gorm:"type:text"`
	CpeWFN
	VersionStartExcluding string
	VersionStartIncluding string
	VersionEndExcluding   string
	VersionEndIncluding   string
}

// CpeWFN has CPE Well Formed name information
type CpeWFN struct {
	Part            string
	Vendor          string
	Product         string
	Version         string
	Update          string
	Edition         string
	Language        string
	SoftwareEdition string
	TargetSW        string
	TargetHW        string
	Other           string
}

// Reference holds reference information about the CVE.
type Reference struct {
	Link   string `gorm:"type:text"`
	Source string
	Tags   string
	Name   string `gorm:"type:text"`
}

// Cert holds CERT alerts.
type Cert struct {
	Title string `gorm:"type:text"`
	Link  string `gorm:"type:text"`
}

// Nvd is a struct of NVD JSON
// https://scap.nist.gov/schema/nvd/feed/0.1/nvd_cve_feed_json_0.1_beta.schema
type Nvd struct {
	ID               int64  `json:"-"`
	CveID            string `gorm:"index:idx_nvds_cveid"`
	Descriptions     []NvdDescription
	Cvss2            NvdCvss2Extra
	Cvss3            NvdCvss3
	Cwes             []NvdCwe
	Cpes             []NvdCpe
	Affects          []NvdAffect
	References       []NvdReference
	Certs            []NvdCert
	PublishedDate    time.Time
	LastModifiedDate time.Time
}

// NvdDescription has description of the CVE
type NvdDescription struct {
	ID    int64 `json:"-"`
	NvdID uint  `json:"-" gorm:"index:idx_nvd_descriptions_nvd_id"`
	Lang  string
	Value string `gorm:"type:text"`
}

// NvdCvss2Extra has Nvd extra CVSS V2 info
type NvdCvss2Extra struct {
	ID    int64 `json:"-"`
	NvdID uint  `json:"-" gorm:"index:idx_nvd_cvss2_extra_nvd_id"`
	Cvss2
	ExploitabilityScore     float64
	ImpactScore             float64
	ObtainAllPrivilege      bool
	ObtainUserPrivilege     bool
	ObtainOtherPrivilege    bool
	UserInteractionRequired bool
}

// NvdCvss3 has Nvd CVSS3 info
type NvdCvss3 struct {
	ID    int64 `json:"-"`
	NvdID uint  `json:"-" gorm:"index:idx_nvd_cvss3_nvd_id"`
	Cvss3
}

// NvdCwe has CweID
type NvdCwe struct {
	ID    int64 `json:"-"`
	NvdID uint  `json:"-" index:"idx_nvd_cwes_nvd_id"`
	CweID string
}

// NvdCpe is Child model of Nvd.
// see https://www.ipa.go.jp/security/vuln/CPE.html
// In NVD,
// configurations>nodes>cpe>vulnerable: true
type NvdCpe struct {
	ID    int64 `json:"-"`
	NvdID uint  `json:"-" gorm:"index:idx_nvd_cpes_nvd_id"`
	CpeBase
	EnvCpes []NvdEnvCpe
}

// NvdEnvCpe is a Environmental CPE
// Only NVD has this information.
// configurations>nodes>cpe>vulnerable: false
type NvdEnvCpe struct {
	ID       int64 `json:"-"`
	NvdCpeID uint  `json:"-" gorm:"index:idx_nvd_env_cpes_nvd_cpe_id"`
	CpeBase
}

// NvdAffect has vendor/product/version info in NVD
type NvdAffect struct {
	ID      int64 `json:"-"`
	NvdID   uint  `json:"-" index:"idx_nvd_affects_nvd_id"`
	Vendor  string
	Product string
	Version string
}

// NvdReference holds reference information about the CVE.
type NvdReference struct {
	ID    int64 `json:"-"`
	NvdID uint  `json:"-" gorm:"index:idx_nvd_references_nvd_id"`
	Reference
}

// NvdCert is Child model of Nvd.
type NvdCert struct {
	ID    int64 `json:"-"`
	NvdID uint  `json:"-" gorm:"index:idx_nvd_certs_nvd_id"`
	Cert
}

// Jvn is a model of JVN
type Jvn struct {
	ID               int64  `json:"-"`
	CveID            string `gorm:"index:idx_jvns_cveid"`
	Title            string
	Summary          string `gorm:"type:text"`
	JvnLink          string
	JvnID            string
	Cvss2            JvnCvss2
	Cvss3            JvnCvss3
	Cpes             []JvnCpe
	References       []JvnReference
	Certs            []JvnCert
	PublishedDate    time.Time
	LastModifiedDate time.Time
}

// JvnCvss2 has Jvn CVSS Version 2 info
type JvnCvss2 struct {
	ID    int64 `json:"-"`
	JvnID uint  `json:"-" gorm:"index:idx_jvn_cvss2_jvn_id"`
	Cvss2
}

// JvnCvss3 has JVN CVSS3 info
type JvnCvss3 struct {
	ID    int64 `json:"-"`
	JVNID uint  `json:"-" gorm:"index:idx_jvn_cvss3_jvn_id"`
	Cvss3
}

// JvnCpe is Child model of Jvn.
// see https://www.ipa.go.jp/security/vuln/CPE.html
type JvnCpe struct {
	ID    int64 `json:"-"`
	JvnID uint  `json:"-" gorm:"index:idx_jvn_cpes_jvn_id"`
	CpeBase
}

// JvnReference is Child model of Jvn.
type JvnReference struct {
	ID    int64 `json:"-"`
	JvnID uint  `json:"-" gorm:"index:idx_jvn_references_jvn_id"`
	Reference
}

// JvnCert is Child model of Jvn.
type JvnCert struct {
	ID    int64 `json:"-"`
	JvnID uint  `json:"-" gorm:"index:idx_jvn_certs_jvn_id"`
	Cert
}
