package commands

import (
	"encoding/json"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	db "github.com/vulsio/go-cve-dictionary/db"
	log "github.com/vulsio/go-cve-dictionary/log"
	"github.com/vulsio/go-cve-dictionary/models"
	"golang.org/x/xerrors"
)

func init() {
	RootCmd.AddCommand(cveCmd)
}

var cveCmd = &cobra.Command{
	Use:   "cve",
	Short: "Show CVE details",
	Long:  `Show CVE details`,
	RunE: func(_ *cobra.Command, args []string) error {
		if len(args) == 0 {
			return xerrors.Errorf("Usage: go-cve-dictionary cve <CVE-ID>")
		}

		driver, err := db.NewDB(viper.GetString("dbtype"), viper.GetString("dbpath"), viper.GetBool("debug-sql"), db.Option{})
		if err != nil {
			if xerrors.Is(err, db.ErrDBLocked) {
				return xerrors.Errorf("Failed to open DB. Close DB connection before fetching. err: %w", err)
			}
			return xerrors.Errorf("Failed to open DB. err: %w", err)
		}

		fetchMeta, err := driver.GetFetchMeta()
		if err != nil {
			return xerrors.Errorf("Failed to get FetchMeta from DB. err: %w", err)
		}
		if fetchMeta.OutDated() {
			return xerrors.Errorf("Failed to start server. err: SchemaVersion is old. SchemaVersion: %+v", map[string]uint{"latest": models.LatestSchemaVersion, "DB": fetchMeta.SchemaVersion})
		}

		count := 0
		nvdCount, err := driver.CountNvd()
		if err != nil {
			log.Errorf("Failed to count NVD table: %s", err)
			return err
		}
		count += nvdCount

		jvnCount, err := driver.CountJvn()
		if err != nil {
			log.Errorf("Failed to count JVN table: %s", err)
			return err
		}
		count += jvnCount

		fortinetCount, err := driver.CountFortinet()
		if err != nil {
			log.Errorf("Failed to count Fortinet table: %s", err)
			return err
		}
		count += fortinetCount

		if count == 0 {
			log.Infof("No Vulnerability data found. Run the below command to fetch data from NVD, JVN, Fortinet")
			log.Infof("")
			log.Infof(" go-cve-dictionary fetch nvd")
			log.Infof(" go-cve-dictionary fetch jvn")
			log.Infof(" go-cve-dictionary fetch fortinet")
			log.Infof("")
			return nil
		}

		enc := json.NewEncoder(os.Stdout)
		enc.SetIndent("", "  ")
		for _, cveid := range args {
			cveDetail, err := driver.Get(cveid)
			if err != nil {
				return xerrors.Errorf("Error getting CVE details. err: %w", err)
			}
			_ = enc.Encode(cveDetail)
		}

		return nil
	},
}
