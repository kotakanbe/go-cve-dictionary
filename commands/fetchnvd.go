package commands

import (
	"fmt"
	"time"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/kotakanbe/go-cve-dictionary/db"
	"github.com/kotakanbe/go-cve-dictionary/fetcher/nvd"
	log "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/models"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"golang.org/x/xerrors"
)

var fetchNvdCmd = &cobra.Command{
	Use:   "fetchnvd",
	Short: "Fetch Vulnerability dictionary from NVD",
	Long:  "Fetch Vulnerability dictionary from NVD",
	RunE:  fetchNvd,
}

func init() {
	RootCmd.AddCommand(fetchNvdCmd)

	fetchNvdCmd.PersistentFlags().Bool("latest", false, "fetch JVN data for latest")
	_ = viper.BindPFlag("latest", fetchNvdCmd.PersistentFlags().Lookup("latest"))

	fetchNvdCmd.PersistentFlags().Bool("last2y", false, "fetch JVN data in the last two years")
	_ = viper.BindPFlag("last2y", fetchNvdCmd.PersistentFlags().Lookup("last2y"))

	fetchNvdCmd.PersistentFlags().IntSlice("years", []int{}, "fetch JVN data of specific years")
	_ = viper.BindPFlag("years", fetchNvdCmd.PersistentFlags().Lookup("years"))

	fetchNvdCmd.PersistentFlags().Bool("light", false, "Don't collect *HEAVY* CPE relate data")
	_ = viper.BindPFlag("light", fetchNvdCmd.PersistentFlags().Lookup("light"))
}

func fetchNvd(cmd *cobra.Command, args []string) (err error) {
	log.SetLogger(viper.GetString("log-dir"), viper.GetBool("debug"), viper.GetBool("log-json"))

	years := []int{}
	thisYear := time.Now().Year()

	switch {
	case viper.GetBool("latest"):
		years = append(years, c.Latest)
	case viper.GetBool("last2y"):
		for i := 0; i < 2; i++ {
			years = append(years, thisYear-i)
		}
		years = append(years, c.Latest)
	case len(viper.GetIntSlice("years")) == 0:
		errMsg := fmt.Sprintf("Specify years to fetch (from 1998 to %d)", thisYear)
		log.Errorf(errMsg)
		return xerrors.Errorf("Failed to fetchJvn. err: %s", errMsg)
	case len(viper.GetIntSlice("years")) > 0:
		for _, year := range viper.GetIntSlice("years") {
			if err != nil || year < 1998 || time.Now().Year() < year {
				errMsg := fmt.Sprintf("Specify years to fetch (from 1998 to %d), arg: %d", thisYear, year)
				log.Errorf(errMsg)
				return xerrors.Errorf("Failed to fetchJvn. err: %s", errMsg)
			}
			found := false
			for _, y := range years {
				if y == year {
					found = true
					break
				}
			}
			if !found {
				years = append(years, year)
			}
		}
		years = append(years, c.Latest)
	default:
		errMsg := "specify -latest, -last2y or -years"
		log.Errorf(errMsg)
		return xerrors.New(errMsg)
	}

	driver, locked, err := db.NewDB(viper.GetString("dbtype"), viper.GetString("dbpath"), viper.GetBool("debug-sql"))
	if err != nil {
		if locked {
			log.Errorf("Failed to initialize DB. Close DB connection before fetching. err: %s", err)
		}
		return err
	}

	fetchMeta, err := driver.GetFetchMeta()
	if err != nil {
		log.Errorf("Failed to get FetchMeta from DB. err: %s", err)
		return err
	}
	if fetchMeta.OutDated() {
		log.Errorf("Failed to Insert CVEs into DB. SchemaVersion is old. SchemaVersion: %v", map[string]uint{"latest": models.LatestSchemaVersion, "DB": fetchMeta.SchemaVersion})
		return xerrors.New("Failed to Insert CVEs into DB. SchemaVersion is old")
	}

	metas, err := nvd.FetchLatestFeedMeta(driver, years)
	if err != nil {
		log.Errorf("%s", err)
		return err
	}

	if len(metas) == 0 {
		log.Errorf("No meta files fetched")
		return err
	}

	log.Infof("Fetching CVE information from NVD.")
	cves, err := nvd.FetchConvert(metas)
	if err != nil {
		log.Errorf("Failed to fetch NVD: %s", err)
		return err
	}

	log.Infof("Fetched %d CVEs", len(cves))

	log.Infof("Inserting NVD into DB (%s).", driver.Name())
	if err := driver.InsertNvd(cves); err != nil {
		log.Errorf("Failed to insert. dbpath: %s, err: %s", viper.GetString("dbpath"), err)
		return err
	}

	if err := nvd.UpdateMeta(driver, metas); err != nil {
		log.Fatalf("Failed to Update meta. dbpath: %s, err: %s", viper.GetString("dbpath"), err)
		return err
	}

	if err := driver.UpsertFetchMeta(fetchMeta); err != nil {
		log.Errorf("Failed to upsert FetchMeta to DB. err: %s", err)
		return err
	}

	return nil
}
