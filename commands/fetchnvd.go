package commands

import (
	"fmt"
	"sort"
	"strconv"
	"time"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/kotakanbe/go-cve-dictionary/db"
	"github.com/kotakanbe/go-cve-dictionary/fetcher/nvd"
	log "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/models"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"golang.org/x/xerrors"
)

var fetchNvdCmd = &cobra.Command{
	Use:   "nvd",
	Short: "Fetch Vulnerability dictionary from NVD",
	Long:  "Fetch Vulnerability dictionary from NVD",
	RunE:  fetchNvd,
}

func init() {
	fetchCmd.AddCommand(fetchNvdCmd)

	fetchNvdCmd.PersistentFlags().Bool("full", false, "Collect large amounts of CPE relate data")
	_ = viper.BindPFlag("full", fetchNvdCmd.PersistentFlags().Lookup("full"))
}

func fetchNvd(cmd *cobra.Command, args []string) (err error) {
	if err := log.SetLogger(viper.GetBool("log-to-file"), viper.GetString("log-dir"), viper.GetBool("debug"), viper.GetBool("log-json")); err != nil {
		return xerrors.Errorf("Failed to SetLogger. err: %w", err)
	}

	years := []int{}
	thisYear := time.Now().Year()

	switch {
	case viper.GetBool("latest"):
		years = append(years, c.Latest)
	case viper.GetBool("last2y"):
		for i := 0; i < 2; i++ {
			years = append(years, thisYear-i)
		}
		years = append(years, c.Latest)
	case viper.GetBool("years"):
		if len(args) == 0 {
			errMsg := fmt.Sprintf("Specify years to fetch (from 2002 to %d)", thisYear)
			log.Errorf(errMsg)
			return xerrors.Errorf("Failed to fetchNvd. err: %s", errMsg)
		}

		for _, arg := range args {
			year, err := strconv.Atoi(arg)
			if err != nil {
				return xerrors.Errorf("Failed to strconv.Atoi(%s). err: %w", arg, err)
			}
			years = append(years, year)
		}

		for _, year := range years {
			if err != nil || year < 2002 || time.Now().Year() < year {
				errMsg := fmt.Sprintf("Specify years to fetch (from 2002 to %d), arg: %d", thisYear, year)
				log.Errorf(errMsg)
				return xerrors.Errorf("Failed to fetchNvd. err: %s", errMsg)
			}
			found := false
			for _, y := range years {
				if y == year {
					found = true
					break
				}
			}
			if !found {
				years = append(years, year)
			}
		}
		years = append(years, c.Latest)
	default:
		errMsg := "specify --latest, --last2y or --years"
		log.Errorf(errMsg)
		return xerrors.New(errMsg)
	}

	driver, locked, err := db.NewDB(viper.GetString("dbtype"), viper.GetString("dbpath"), viper.GetBool("debug-sql"))
	if err != nil {
		if locked {
			log.Errorf("Failed to initialize DB. Close DB connection before fetching. err: %s", err)
		}
		return err
	}

	fetchMeta, err := driver.GetFetchMeta()
	if err != nil {
		log.Errorf("Failed to get FetchMeta from DB. err: %s", err)
		return err
	}
	if fetchMeta.OutDated() {
		log.Errorf("Failed to Insert CVEs into DB. SchemaVersion is old. SchemaVersion: %v", map[string]uint{"latest": models.LatestSchemaVersion, "DB": fetchMeta.SchemaVersion})
		return xerrors.New("Failed to Insert CVEs into DB. SchemaVersion is old")
	}

	metas, err := nvd.FetchLatestFeedMeta(driver, years)
	if err != nil {
		log.Errorf("%s", err)
		return err
	}

	if len(metas) == 0 {
		log.Errorf("No meta files fetched")
		return err
	}

	needUpdates := []models.FeedMeta{}
	if viper.GetBool("force") {
		needUpdates = metas
	} else {
		for _, m := range metas {
			if m.Newly() {
				needUpdates = append(needUpdates, m)
				log.Infof("Newly     : %s", m.URL)
			} else if m.OutDated() {
				needUpdates = append(needUpdates, m)
				log.Infof("Outdated  : %s", m.URL)
			} else {
				log.Infof("Up to date: %s", m.URL)
			}
		}
	}

	if len(needUpdates) == 0 {
		log.Infof("Already up to date")
		return nil
	}

	sort.Slice(needUpdates, func(i, j int) bool { return needUpdates[i].Year < needUpdates[j].Year })

	log.Infof("Fetching CVE information from NVD.")
	cves, err := nvd.FetchConvert(needUpdates)
	if err != nil {
		log.Errorf("Failed to fetch NVD: %s", err)
		return err
	}

	log.Infof("Inserting NVD into DB (%s).", driver.Name())
	if err := driver.InsertNvd(needUpdates, cves); err != nil {
		log.Errorf("Failed to insert. dbpath: %s, err: %s", viper.GetString("dbpath"), err)
		return err
	}

	if err := driver.UpsertFetchMeta(fetchMeta); err != nil {
		log.Errorf("Failed to upsert FetchMeta to DB. err: %s", err)
		return err
	}

	return nil
}
