package commands

import (
	"fmt"
	"os"
	"sort"

	"github.com/kotakanbe/go-cve-dictionary/db"
	"github.com/kotakanbe/go-cve-dictionary/fetcher/jvn"
	"github.com/kotakanbe/go-cve-dictionary/fetcher/nvd"
	log "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/models"
	"github.com/olekukonko/tablewriter"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"golang.org/x/xerrors"
)

var listCmd = &cobra.Command{
	Use:   "list",
	Short: "Show a list of fetched feeds",
	Long:  "Show a list of fetched feeds",
	RunE:  list,
}

func init() {
	RootCmd.AddCommand(listCmd)
}

func list(cmd *cobra.Command, args []string) (err error) {
	log.SetLogger(viper.GetString("log-dir"), viper.GetBool("debug"), viper.GetBool("log-json"))

	driver, locked, err := db.NewDB(viper.GetString("dbtype"), viper.GetString("dbpath"), viper.GetBool("debug-sql"))
	if err != nil {
		if locked {
			log.Errorf("Failed to initialize DB. Close DB connection before fetching. err: %s", err)
		}
		return err
	}

	fetchMeta, err := driver.GetFetchMeta()
	if err != nil {
		log.Errorf("Failed to get FetchMeta from DB. err: %s", err)
		return err
	}
	if fetchMeta.OutDated() {
		log.Errorf("Failed to Insert CVEs into DB. SchemaVersion is old. SchemaVersion: %v", map[string]uint{"latest": models.LatestSchemaVersion, "DB": fetchMeta.SchemaVersion})
		return xerrors.New("Failed to Insert CVEs into DB. SchemaVersion is old")
	}

	nvdMetas, err := nvd.ListFetchedFeeds(driver)
	if err != nil {
		log.Errorf("%s", err)
		return err
	}
	sort.Slice(nvdMetas, func(i, j int) bool {
		return nvdMetas[i].URL < nvdMetas[j].URL
	})

	jvnMetas, err := jvn.ListFetchedFeeds(driver)
	if err != nil {
		log.Errorf("%s", err)
		return err
	}
	sort.Slice(jvnMetas, func(i, j int) bool {
		return jvnMetas[i].URL < jvnMetas[j].URL
	})

	metas := []models.FeedMeta{}
	for _, mm := range [][]models.FeedMeta{nvdMetas, jvnMetas} {
		metas = append(metas, mm...)
	}
	data := [][]string{}
	for _, meta := range metas {
		data = append(data, meta.ToTableWriterRow())
	}
	table := tablewriter.NewWriter(os.Stdout)
	table.SetHeader([]string{"Source", "Year", "Status", "Fetched", "Latest"})
	table.SetBorder(true)
	table.SetHeaderColor(
		tablewriter.Colors{tablewriter.Bold},
		tablewriter.Colors{tablewriter.Bold},
		tablewriter.Colors{tablewriter.Bold},
		tablewriter.Colors{tablewriter.Bold},
		tablewriter.Colors{tablewriter.Bold})
	table.AppendBulk(data)
	table.Render()

	cmds := []string{}
	for _, mm := range [][]models.FeedMeta{nvdMetas, jvnMetas} {
		cmd := getUpdateCommand(mm)
		if cmd != "" {
			cmds = append(cmds, cmd)
		}
	}

	if 0 < len(cmds) {
		fmt.Printf("\nTo update feeds, execute the following commands.\n")
		for _, cmd := range cmds {
			fmt.Println(cmd)
		}
	}

	return nil
}

func getUpdateCommand(metas []models.FeedMeta) string {
	if len(metas) == 0 {
		return ""
	}
	years := map[string]bool{}
	latest := false
	for _, meta := range metas {
		if meta.OutDated() {
			y, _, err := meta.Year()
			if err != nil {
				log.Errorf("err")
				continue
			}
			switch y {
			case "modified", "recent":
				latest = true
			default:
				years[y] = true
			}
		}
	}

	opt := metas[0].FetchOption()
	if len(years) == 0 && latest {
		return fmt.Sprintf("$ go-cve-dictionary %s -latest", opt)
	}
	if len(years) == 0 {
		return ""
	}
	opt += " -years"
	for y := range years {
		opt += " " + y
	}
	return fmt.Sprintf("$ go-cve-dictionary %s", opt)
}
