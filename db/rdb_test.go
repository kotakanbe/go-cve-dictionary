package db

import (
	"reflect"
	"testing"

	_ "github.com/jinzhu/gorm/dialects/mysql"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
	"github.com/kotakanbe/go-cve-dictionary/models"
)

func TestRDBDriver_getMatchingCpes(t *testing.T) {
	nvdRangeCpe := models.NvdCpe{
		NvdID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
			VersionStartIncluding: "0.0.1",
			VersionEndIncluding:   "2.0.0",
		},
	}
	nvdNonSemVerCpe := models.NvdCpe{
		NvdID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
			VersionStartIncluding: "hoge",
			VersionEndIncluding:   "hoge",
		},
	}
	jvnCpe := models.JvnCpe{
		JvnID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
		},
	}

	type args struct {
		uri                        string
		getCpesByVendorProductFunc func(string) (models.CpeDetail, error)
		getAffects                 func(uint) ([]models.NvdAffect, error)
	}
	tests := []struct {
		name    string
		args    args
		want    models.CpeDetail
		wantErr bool
	}{
		{
			name: "nvd range match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				getCpesByVendorProductFunc: func(string) (models.CpeDetail, error) {
					return models.CpeDetail{Nvd: []models.NvdCpe{nvdRangeCpe}, Jvn: []models.JvnCpe{}}, nil
				},
				getAffects: func(uint) ([]models.NvdAffect, error) { panic("not implemented") },
			},
			want:    models.CpeDetail{Nvd: []models.NvdCpe{nvdRangeCpe}, Jvn: []models.JvnCpe{}},
			wantErr: false,
		},
		{
			name: "nvd range not match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				getCpesByVendorProductFunc: func(string) (models.CpeDetail, error) {
					return models.CpeDetail{Nvd: []models.NvdCpe{nvdRangeCpe}, Jvn: []models.JvnCpe{}}, nil
				},
				getAffects: func(uint) ([]models.NvdAffect, error) { panic("not implemented") },
			},
			want:    models.CpeDetail{Nvd: []models.NvdCpe{}, Jvn: []models.JvnCpe{}},
			wantErr: false,
		},
		{
			name: "nvd affects match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				getCpesByVendorProductFunc: func(string) (models.CpeDetail, error) {
					return models.CpeDetail{Nvd: []models.NvdCpe{nvdNonSemVerCpe}, Jvn: []models.JvnCpe{}}, nil
				},
				getAffects: func(uint) ([]models.NvdAffect, error) {
					return []models.NvdAffect{
						{
							NvdID:   1,
							Vendor:  "qualcomm",
							Product: "qcs605_firmware",
							Version: "1.0.0",
						},
					}, nil
				},
			},
			want:    models.CpeDetail{Nvd: []models.NvdCpe{nvdNonSemVerCpe}, Jvn: []models.JvnCpe{}},
			wantErr: false,
		},
		{
			name: "nvd affects not match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				getCpesByVendorProductFunc: func(string) (models.CpeDetail, error) {
					return models.CpeDetail{Nvd: []models.NvdCpe{nvdNonSemVerCpe}, Jvn: []models.JvnCpe{}}, nil
				},
				getAffects: func(uint) ([]models.NvdAffect, error) {
					return []models.NvdAffect{
						{
							NvdID:   1,
							Vendor:  "qualcomm",
							Product: "qcs605_firmware",
							Version: "1.0.1",
						},
					}, nil
				},
			},
			want:    models.CpeDetail{Nvd: []models.NvdCpe{}, Jvn: []models.JvnCpe{}},
			wantErr: false,
		},
		{
			name: "jvn match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				getCpesByVendorProductFunc: func(string) (models.CpeDetail, error) {
					return models.CpeDetail{Nvd: []models.NvdCpe{}, Jvn: []models.JvnCpe{jvnCpe}}, nil
				},
				getAffects: func(uint) ([]models.NvdAffect, error) {
					return nil, nil
				},
			},
			want:    models.CpeDetail{Nvd: []models.NvdCpe{}, Jvn: []models.JvnCpe{jvnCpe}},
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				getCpesByVendorProductFunc: func(string) (models.CpeDetail, error) {
					return models.CpeDetail{Nvd: []models.NvdCpe{nvdRangeCpe}, Jvn: []models.JvnCpe{jvnCpe}}, nil
				},
				getAffects: func(uint) ([]models.NvdAffect, error) {
					return nil, nil
				},
			},
			want:    models.CpeDetail{Nvd: []models.NvdCpe{}, Jvn: []models.JvnCpe{}},
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				getCpesByVendorProductFunc: func(string) (models.CpeDetail, error) {
					return models.CpeDetail{Nvd: []models.NvdCpe{nvdRangeCpe}, Jvn: []models.JvnCpe{jvnCpe}}, nil
				},
				getAffects: func(uint) ([]models.NvdAffect, error) {
					return nil, nil
				},
			},
			want:    models.CpeDetail{Nvd: []models.NvdCpe{nvdRangeCpe}, Jvn: []models.JvnCpe{}},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			r := &RDBDriver{}
			got, err := r.getMatchingCpes(tt.args.uri, tt.args.getCpesByVendorProductFunc, tt.args.getAffects)
			if (err != nil) != tt.wantErr {
				t.Errorf("RDBDriver.getMatchingCpes() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("RDBDriver.getMatchingCpes() = %#v, want %#v", got, tt.want)
			}
		})
	}
}
