package db

import (
	"os"
	"testing"

	"github.com/kotakanbe/go-cve-dictionary/models"
)

func TestMain(m *testing.M) {
	// log.Initialize("/tmp", true, os.Stderr)
	code := m.Run()
	os.Exit(code)
}

// move to rdb_test.go
func TestMakeVersionConstraint(t *testing.T) {
	var testdata = []struct {
		cpe        models.Cpe
		constraint string
	}{
		{
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:            "a",
						Vendor:          "cisco",
						Product:         "node-jose",
						Version:         "",
						Update:          "",
						Edition:         "",
						Language:        "",
						SoftwareEdition: "",
						TargetSW:        "",
						TargetHW:        "",
						Other:           "",
					},
					VersionStartExcluding: "",
					VersionStartIncluding: "",
					VersionEndExcluding:   "0.11.0",
					VersionEndIncluding:   "",
				},
			},
			constraint: "< 0.11.0",
		},
		{
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionEndIncluding: "0.11.0",
				},
			},
			constraint: "<= 0.11.0",
		},
		{
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionStartExcluding: "0.10.0",
					VersionEndIncluding:   "0.11.0",
				},
			},
			constraint: "> 0.10.0, <= 0.11.0",
		},
		{
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionStartIncluding: "0.10.0",
					VersionEndExcluding:   "0.11.0",
				},
			},
			constraint: ">= 0.10.0, < 0.11.0",
		},
		{
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionStartIncluding: "",
					VersionEndExcluding:   "",
				},
			},
			constraint: "",
		},
	}

	for i, tt := range testdata {
		constraint := makeVersionConstraint(tt.cpe)
		if tt.constraint != constraint {
			t.Errorf("[%d] expected %s, actual %s", i, tt.constraint, constraint)
		}
	}
}

// move to rdb_test.go
func TestMatch(t *testing.T) {
	var testdata = []struct {
		name  string
		uri   string
		cpe   models.Cpe
		match bool
		err   bool
	}{
		//0
		{
			uri: "cpe:/a:oracle:vm_virtualbox:5.1.1",
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					URI:                   "cpe:/a:oracle:vm_virtualbox",
					VersionStartIncluding: "5.1.0",
					VersionEndExcluding:   "5.1.32",
				},
			},
			match: true,
		},
		//1
		{
			uri: "cpe:/a:oracle:vm_virtualbox:5.0.9",
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					URI:                   "cpe:/a:oracle:vm_virtualbox",
					VersionStartIncluding: "5.1.0",
					VersionEndExcluding:   "5.1.32",
				},
			},
			match: false,
		},
		//2
		{
			uri: "cpe:/a:oracle:vm_virtualbox:5.1.0",
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					URI:                   "cpe:/a:oracle:vm_virtualbox",
					VersionStartIncluding: "5.1.0",
					VersionEndExcluding:   "5.1.32",
				},
			},
			match: true,
		},
		//3
		{
			uri: "cpe:/a:oracle:vm_virtualbox:5.2.32",
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					URI:                   "cpe:/a:oracle:vm_virtualbox",
					VersionStartIncluding: "5.1.0",
					VersionEndExcluding:   "5.1.32",
				},
			},
			match: false,
		},
		//4
		{
			uri: "cpe:/a:oracle:vm_virtualbox:5.1.31",
			cpe: models.Cpe{
				CpeBase: models.CpeBase{
					URI:                   "cpe:/a:oracle:vm_virtualbox",
					VersionStartIncluding: "5.1.0",
					VersionEndExcluding:   "5.1.32",
				},
			},
			match: true,
		},
		//5
		{
			uri: "cpe:/a:oracle:vm_virtualbox:5.1.31",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:oracle:vm_virtualbox:5.1.31",
			}},
			match: true,
		},
		//
		{
			uri: "cpe:/a:oracle:vm_virtualbox:5.1.31",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:oracle:vm_virtualbox:5.1.31",
			}},
			match: true,
		},
		{
			name: "superset",
			uri:  "cpe:/o:microsoft:windows_7",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/o:microsoft:windows_7::sp1",
			}},
			match: true,
		},
		{
			name: "subset",
			uri:  "cpe:/o:microsoft:windows_7::sp2",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/o:microsoft:windows_7",
			}},
			match: true,
		},
		{
			name: "subset",
			uri:  "cpe:/o:microsoft:windows_10",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/o:microsoft:windows_10:-",
			}},
			match: true,
		},
		{
			//TODO
			name: "no semver format",
			uri:  "cpe:/a:cisco:ios:15.2%282%29eb",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:cisco:ios:15.2%282%29ec",
			}},
			match: false,
			err:   true,
		},
		// targetSW
		{
			name: "targetSW: 1",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			}},
			match: true,
			err:   false,
		},
		{
			name: "targetSW: 2",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1::~~~android~~",
			}},
			match: false,
			err:   false,
		},
		{
			name: "targetSW: 2.1",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.2::~~~android~~",
			}},
			match: false,
			err:   false,
		},
		{
			name: "targetSW: 2.2",
			uri:  "cpe:/a:apache:cordova:5.1.1",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.2",
			}},
			match: false,
			err:   false,
		},
		{
			name: "targetSW: 2.3",
			uri:  "cpe:/a:apache:cordova:5.1.1",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1",
			}},
			match: true,
			err:   false,
		},
		{
			name: "targetSW: 3",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1",
			}},
			match: true,
			err:   false,
		},
		{
			name: "targetSW: 4",
			uri:  "cpe:/a:apache:cordova:::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1",
			}},
			match: true,
			err:   false,
		},
		{
			name: "targetSW: 5",
			uri:  "cpe:/a:apache:cordova:::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1::~~~android~~",
			}},
			match: false,
			err:   false,
		},
		{
			name: "targetSW: 6",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI:                   "cpe:/a:apache:cordova",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.2",
			}},
			match: true,
			err:   false,
		},
		{
			name: "targetSW: 7",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.Cpe{CpeBase: models.CpeBase{
				URI:                   "cpe:/a:apache:cordova:::~~~android~~",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.2",
			}},
			match: false,
			err:   false,
		},
	}

	for i, tt := range testdata {
		match, err := match(tt.uri, tt.cpe)
		if !tt.err && err != nil {
			t.Errorf("[%d] err: %s", i, err)
		}

		if tt.match != match {
			t.Errorf("[%d] name: %s, expected: %t, actual: %t", i, tt.name, tt.match, match)
		}
	}
}

func TestMatchProductVendor(t *testing.T) {
	var testdata = []struct {
		uri     string
		affects []models.Affect
		match   bool
	}{
		{
			uri: "cpe:/o:cisco:nx-os:6.0%282%29a6%288%29",
			affects: []models.Affect{
				{
					Vendor:  "cisco",
					Product: "nx-os",
					Version: "6.0(2)a6(8)",
				},
			},
			match: true,
		},
		{
			uri: "cpe:/o:cisco:nx-os:6.0%282%29a6%288%29",
			affects: []models.Affect{
				{
					Vendor:  "cisco",
					Product: "nx-os",
					Version: "7.0(2)a6(8)",
				},
			},
			match: false,
		},
	}
	for i, tt := range testdata {
		match, err := matchExactByAffects(tt.uri, tt.affects)
		if err != nil {
			t.Errorf("[%d] err: %s", i, err)
		}

		if tt.match != match {
			t.Errorf("[%d] expected: %t, actual: %t", i, tt.match, match)
		}
	}
}

func Test_matchCpe(t *testing.T) {
	nvdRangeCpe := models.Cpe{
		NvdJSONID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
			VersionStartIncluding: "0.0.1",
			VersionEndIncluding:   "2.0.0",
		},
	}
	nvdNonSemVerCpe := models.Cpe{
		NvdJSONID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
			VersionStartIncluding: "hoge",
			VersionEndIncluding:   "hoge",
		},
	}
	jvnCpe := models.Cpe{
		JvnID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
		},
	}
	type args struct {
		uri string
		cve *models.CveDetail
	}
	tests := []struct {
		name    string
		args    args
		nvdWant bool
		jvnWant bool
		wantErr bool
	}{
		{
			name: "nvd range match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					NvdJSON: &models.NvdJSON{
						Cpes: []models.Cpe{nvdRangeCpe},
					},
				},
			},
			nvdWant: true,
			wantErr: false,
		},
		{
			name: "nvd range not match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				cve: &models.CveDetail{
					NvdJSON: &models.NvdJSON{
						Cpes: []models.Cpe{nvdRangeCpe},
					},
				},
			},
			nvdWant: false,
			wantErr: false,
		},
		{
			name: "nvd affect match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					NvdJSON: &models.NvdJSON{
						Cpes: []models.Cpe{nvdNonSemVerCpe},
						Affects: []models.Affect{
							{
								Vendor:  "qualcomm",
								Product: "qcs605_firmware",
								Version: "1.0.0",
							},
						},
					},
				},
			},
			nvdWant: true,
			wantErr: false,
		},
		{
			name: "nvd affects not match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					NvdJSON: &models.NvdJSON{
						Cpes: []models.Cpe{nvdNonSemVerCpe},
						Affects: []models.Affect{
							{
								Vendor:  "qualcomm",
								Product: "qcs605_firmware",
								Version: "1.0.1",
							},
						},
					},
				},
			},
			nvdWant: false,
			wantErr: false,
		},
		{
			name: "jvn match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Jvn: &models.Jvn{
						Cpes: []models.Cpe{jvnCpe},
					},
				},
			},
			jvnWant: true,
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				cve: &models.CveDetail{
					NvdJSON: &models.NvdJSON{
						Cpes: []models.Cpe{nvdRangeCpe},
					},
					Jvn: &models.Jvn{
						Cpes: []models.Cpe{jvnCpe},
					},
				},
			},
			nvdWant: false,
			jvnWant: false,
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					NvdJSON: &models.NvdJSON{
						Cpes: []models.Cpe{nvdRangeCpe},
					},
					Jvn: &models.Jvn{
						Cpes: []models.Cpe{jvnCpe},
					},
				},
			},
			nvdWant: true,
			jvnWant: false,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			nvdGot, jvnGot, err := matchCpe(tt.args.uri, tt.args.cve)
			if (err != nil) != tt.wantErr {
				t.Errorf("matchCpe() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if nvdGot != tt.nvdWant {
				t.Errorf("matchCpe() nvd = %v, want %v", nvdGot, tt.nvdWant)
			}
			if jvnGot != tt.jvnWant {
				t.Errorf("matchCpe() jvn = %v, want %v", jvnGot, tt.jvnWant)
			}
		})
	}
}
