package db

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/cheggaaa/pb/v3"
	"github.com/knqyf263/go-cpe/common"
	"github.com/knqyf263/go-cpe/naming"
	"github.com/kotakanbe/go-cve-dictionary/config"
	logger "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/models"
	sqlite3 "github.com/mattn/go-sqlite3"
	"golang.org/x/xerrors"
	"gorm.io/driver/mysql"
	"gorm.io/driver/postgres"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	gormLogger "gorm.io/gorm/logger"
)

// Supported DB dialects.
const (
	dialectSqlite3    = "sqlite3"
	dialectMysql      = "mysql"
	dialectPostgreSQL = "postgres"
)

// RDBDriver is Driver for RDB
type RDBDriver struct {
	name string
	conn *gorm.DB
}

// Name return db name
func (r *RDBDriver) Name() string {
	return r.name
}

// OpenDB opens Database
func (r *RDBDriver) OpenDB(dbType, dbPath string, debugSQL bool) (locked bool, err error) {
	gormConfig := gorm.Config{
		DisableForeignKeyConstraintWhenMigrating: true,
		Logger:                                   gormLogger.Default.LogMode(gormLogger.Silent),
	}

	if debugSQL {
		gormConfig.Logger = gormLogger.New(
			log.New(os.Stderr, "\r\n", log.LstdFlags),
			gormLogger.Config{
				SlowThreshold: time.Second,
				LogLevel:      gormLogger.Info,
				Colorful:      true,
			},
		)
	}

	switch r.name {
	case dialectSqlite3:
		r.conn, err = gorm.Open(sqlite.Open(dbPath), &gormConfig)
	case dialectMysql:
		r.conn, err = gorm.Open(mysql.Open(dbPath), &gormConfig)
	case dialectPostgreSQL:
		r.conn, err = gorm.Open(postgres.Open(dbPath), &gormConfig)
	default:
		err = xerrors.Errorf("Not Supported DB dialects. r.name: %s", r.name)
	}

	if err != nil {
		msg := fmt.Sprintf("Failed to open DB. dbtype: %s, dbpath: %s, err: %s", dbType, dbPath, err)
		if r.name == dialectSqlite3 {
			switch err.(sqlite3.Error).Code {
			case sqlite3.ErrLocked, sqlite3.ErrBusy:
				return true, fmt.Errorf(msg)
			}
		}
		return false, fmt.Errorf(msg)
	}

	if r.name == dialectSqlite3 {
		r.conn.Exec("PRAGMA foreign_keys = ON")
	}
	return false, nil
}

// CloseDB close Database
func (r *RDBDriver) CloseDB() (err error) {
	if r.conn == nil {
		return
	}

	var sqlDB *sql.DB
	if sqlDB, err = r.conn.DB(); err != nil {
		return xerrors.Errorf("Failed to get DB Object. err : %w", err)
	}
	if err = sqlDB.Close(); err != nil {
		return xerrors.Errorf("Failed to close DB. Type: %s. err: %w", r.name, err)
	}
	return
}

// MigrateDB migrates Database
func (r *RDBDriver) MigrateDB() error {
	if err := r.conn.AutoMigrate(
		&models.FeedMeta{},
		&models.FetchMeta{},

		&models.Nvd{},
		&models.NvdDescription{},
		&models.NvdCvss2Extra{},
		&models.NvdCvss3{},
		&models.NvdCwe{},
		&models.NvdCpe{},
		&models.NvdEnvCpe{},
		&models.NvdAffect{},
		&models.NvdReference{},
		&models.NvdCert{},

		&models.Jvn{},
		&models.JvnCvss2{},
		&models.JvnCvss3{},
		&models.JvnCpe{},
		&models.JvnReference{},
		&models.JvnCert{},
	); err != nil {
		return fmt.Errorf("Failed to migrate. err: %s", err)
	}

	return nil
}

// IsGoCVEDictModelV1 determines if the DB was created at the time of go-cve-dictionary Model v1
func (r *RDBDriver) IsGoCVEDictModelV1() (bool, error) {
	if r.conn.Migrator().HasTable(&models.FetchMeta{}) {
		return false, nil
	}

	var (
		count int64
		err   error
	)
	switch r.name {
	case dialectSqlite3:
		err = r.conn.Table("sqlite_master").Where("type = ?", "table").Count(&count).Error
	case dialectMysql:
		err = r.conn.Table("information_schema.tables").Where("table_schema = ?", r.conn.Migrator().CurrentDatabase()).Count(&count).Error
	case dialectPostgreSQL:
		err = r.conn.Table("pg_tables").Where("schemaname = ?", "public").Count(&count).Error
	}

	if count > 0 {
		return true, nil
	}
	return false, err
}

// GetFetchMeta get FetchMeta from Database
func (r *RDBDriver) GetFetchMeta() (fetchMeta *models.FetchMeta, err error) {
	if err = r.conn.Take(&fetchMeta).Error; err != nil {
		if !errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, err
		}
		return &models.FetchMeta{GoCVEDictRevision: config.Revision, SchemaVersion: models.LatestSchemaVersion}, nil
	}

	return fetchMeta, nil
}

// UpsertFetchMeta upsert FetchMeta to Database
func (r *RDBDriver) UpsertFetchMeta(fetchMeta *models.FetchMeta) error {
	fetchMeta.GoCVEDictRevision = config.Revision
	fetchMeta.SchemaVersion = models.LatestSchemaVersion
	return r.conn.Save(fetchMeta).Error
}

// GetMulti Select Cves information from DB.
func (r *RDBDriver) GetMulti(cveIDs []string) (map[string]models.CveDetail, error) {
	cveDetails := map[string]models.CveDetail{}
	for _, cveID := range cveIDs {
		cve, err := r.Get(cveID)
		if err != nil {
			return nil, err
		}
		cveDetails[cveID] = *cve
	}
	return cveDetails, nil
}

// Get Select Cve information from DB.
func (r *RDBDriver) Get(cveID string) (*models.CveDetail, error) {
	detail := models.CveDetail{
		CveID: cveID,
	}
	err := r.conn.
		Where(&models.Nvd{CveID: cveID}).
		Preload("Descriptions").
		Preload("Cvss2").
		Preload("Cvss3").
		Preload("Cwes").
		Preload("Cpes").
		Preload("Cpes.EnvCpes").
		Preload("Affects").
		Preload("References").
		Preload("Certs").
		Find(&detail.Nvd).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}

	err = r.conn.
		Where(&models.Jvn{CveID: cveID}).
		Preload("Cvss2").
		Preload("Cvss3").
		Preload("Cpes").
		Preload("References").
		Preload("Certs").
		Find(&detail.Jvn).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}

	return &detail, nil
}

func (r *RDBDriver) getCveIDsByPartVendorProduct(uri string) ([]string, error) {
	specified, err := naming.UnbindURI(uri)
	if err != nil {
		return nil, err
	}

	nvds := []models.Nvd{}
	err = r.conn.
		Select("nvds.cve_id").
		Joins("JOIN nvd_cpes ON nvd_cpes.nvd_id = nvds.id").
		Where(models.NvdCpe{
			CpeBase: models.CpeBase{
				CpeWFN: models.CpeWFN{
					Part:    specified.GetString(common.AttributePart),
					Vendor:  specified.GetString(common.AttributeVendor),
					Product: specified.GetString(common.AttributeProduct),
				},
			}}).
		Not("nvd_cpes.nvd_id = 0").
		Find(&nvds).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}

	jvns := []models.Jvn{}
	err = r.conn.
		Select("jvns.cve_id").
		Joins("JOIN jvn_cpes ON jvn_cpes.jvn_id = jvns.id").
		Where(models.JvnCpe{
			CpeBase: models.CpeBase{
				CpeWFN: models.CpeWFN{
					Part:    specified.GetString(common.AttributePart),
					Vendor:  specified.GetString(common.AttributeVendor),
					Product: specified.GetString(common.AttributeProduct),
				},
			}}).
		Not("jvn_cpes.jvn_id = 0").
		Find(&jvns).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}

	cveIDs := []string{}
	for _, nvd := range nvds {
		cveIDs = append(cveIDs, nvd.CveID)
	}
	for _, jvn := range jvns {
		cveIDs = append(cveIDs, jvn.CveID)
	}

	return cveIDs, nil
}

// GetCveIDsByCpeURI Select Cve Ids by by pseudo-CPE
func (r *RDBDriver) GetCveIDsByCpeURI(uri string) (nvdCveIDs []string, jvnCveIDs []string, err error) {
	cveIDs, err := r.getCveIDsByPartVendorProduct(uri)
	if err != nil {
		return nil, nil, err
	}

	uniqCveIDs := map[string]bool{}
	for _, v := range cveIDs {
		uniqCveIDs[v] = true
	}

	nvdCveIDs = []string{}
	jvnCveIDs = []string{}
	for cveID := range uniqCveIDs {
		d, err := r.Get(cveID)
		if err != nil {
			return nil, nil, err
		}
		if err := filterCVEDetailbyCPEURI(uri, d); err != nil {
			return nil, nil, err
		}
		nvdMatch, jvnMatch, err := matchCpe(uri, d)
		if err != nil {
			logger.Warnf("Failed to compare the version:%s %s %#v",
				err, uri, d)
			continue
		}
		if nvdMatch {
			nvdCveIDs = append(nvdCveIDs, d.CveID)
		} else if jvnMatch {
			jvnCveIDs = append(jvnCveIDs, d.CveID)
		}
	}

	return nvdCveIDs, jvnCveIDs, nil
}

// GetByCpeURI Select Cve information from DB.
func (r *RDBDriver) GetByCpeURI(uri string) ([]models.CveDetail, error) {
	cveIDs, err := r.getCveIDsByPartVendorProduct(uri)
	if err != nil {
		return nil, err
	}

	uniqCveIDs := map[string]bool{}
	for _, v := range cveIDs {
		uniqCveIDs[v] = true
	}

	details := []models.CveDetail{}
	for cveID := range uniqCveIDs {
		d, err := r.Get(cveID)
		if err != nil {
			return nil, err
		}
		if err := filterCVEDetailbyCPEURI(uri, d); err != nil {
			return nil, err
		}
		if len(d.Nvd) > 0 || len(d.Jvn) > 0 {
			details = append(details, *d)
		}
	}
	return details, nil
}

// InsertJvn inserts Cve Information into DB
func (r *RDBDriver) InsertJvn(feedMetas []models.FeedMeta, cves map[string][]models.Jvn) error {
	logger.Infof("Inserting fetched CVEs...")
	for _, meta := range feedMetas {
		result := r.conn.Where(&models.FeedMeta{Source: meta.Source, Year: meta.Year}).Take(&meta)
		if result.Error != nil && !errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return fmt.Errorf("Failed to select. err: %s", result.Error)
		}

		if result.RowsAffected == 0 {
			if err := r.conn.Create(&meta).Error; err != nil {
				return xerrors.Errorf("Failed to insert. err: %w", err)
			}
		}

		if _, ok := cves[meta.Year]; !ok {
			return xerrors.Errorf("Failed to get cves[%s].", meta.Year)
		}

		if err := r.deleteAndInsertJvn(r.conn, meta.ID, cves[meta.Year]); err != nil {
			return xerrors.Errorf("Failed to deleteAndInsertJvn. err: %w", err)
		}

		meta.Hash = meta.LatestHash
		meta.LastModifiedDate = meta.LatestLastModifiedDate
		if err := r.conn.Save(&meta).Error; err != nil {
			return xerrors.Errorf("Failed to insert. err: %w", err)
		}
	}
	return nil
}

func (r *RDBDriver) deleteAndInsertJvn(conn *gorm.DB, feedMetaID uint, cves []models.Jvn) (err error) {
	tx := conn.Begin()

	defer func() {
		if err != nil {
			logger.Errorf("Failed to deleteAndInsertJvn. err : %s", err)
			tx.Rollback()
			return
		}
		tx.Commit()
	}()

	// Delete all old records
	var olds []models.Jvn
	if err := tx.Where(&models.Jvn{FeedMetaID: feedMetaID}).Find(&olds).Error; err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}

	if len(olds) > 0 {
		if err := tx.Session(&gorm.Session{AllowGlobalUpdate: true}).
			Select("Cvss2", "Cvss3", "Cpes", "References", "Certs").
			Delete(&olds).Error; err != nil {
			return err
		}
	}

	bar := pb.StartNew(len(cves))
	for _, cve := range cves {
		cve.FeedMetaID = feedMetaID
		if err := tx.Omit("Cpes").Create(&cve).Error; err != nil {
			return fmt.Errorf("Failed to insert. err: %s", err)
		}

		for idx := range chunkSlice(len(cve.Cpes), 10) {
			for i := range cve.Cpes[idx.From:idx.To] {
				cve.Cpes[idx.From:idx.To][i].JvnID = uint(cve.ID)
			}
			if err = tx.Create(cve.Cpes[idx.From:idx.To]).Error; err != nil {
				return fmt.Errorf("Failed to insert. err: %s", err)
			}
		}

		bar.Increment()
	}
	bar.Finish()

	logger.Infof("Refreshed %d Jvns.", len(cves))
	return nil
}

// CountNvd count nvd table
func (r *RDBDriver) CountNvd() (int, error) {
	var count int64
	err := r.conn.Model(&models.Nvd{}).Count(&count).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return 0, err
	}
	return int(count), nil
}

// InsertNvd Cve information from DB.
func (r *RDBDriver) InsertNvd(feedMetas []models.FeedMeta, cves map[string][]models.Nvd) (err error) {
	logger.Infof("Inserting fetched CVEs...")
	for _, meta := range feedMetas {
		result := r.conn.Where(&models.FeedMeta{Source: meta.Source, Year: meta.Year}).Take(&meta)
		if result.Error != nil && !errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return fmt.Errorf("Failed to select. err: %s", result.Error)
		}

		if result.RowsAffected == 0 {
			if err := r.conn.Create(&meta).Error; err != nil {
				return xerrors.Errorf("Failed to insert. err: %w", err)
			}
		}

		if _, ok := cves[meta.Year]; !ok {
			return xerrors.Errorf("Failed to get cves[%s].", meta.Year)
		}

		if err := r.deleteAndInsertNvd(r.conn, meta.ID, cves[meta.Year]); err != nil {
			return xerrors.Errorf("Failed to deleteAndInsertNvd. err: %w", err)
		}

		meta.Hash = meta.LatestHash
		meta.LastModifiedDate = meta.LatestLastModifiedDate
		if err := r.conn.Save(&meta).Error; err != nil {
			return xerrors.Errorf("Failed to insert. err: %w", err)
		}
	}
	return nil
}

func (r *RDBDriver) deleteAndInsertNvd(conn *gorm.DB, feedMetaID uint, cves []models.Nvd) (err error) {
	tx := conn.Begin()

	defer func() {
		if err != nil {
			logger.Errorf("Failed to deleteAndInsertNvd. err : %s", err)
			tx.Rollback()
			return
		}
		tx.Commit()
	}()

	// Delete all old records
	var olds []models.Nvd
	if err := tx.Where(&models.Nvd{FeedMetaID: feedMetaID}).Find(&olds).Error; err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}

	if len(olds) > 0 {
		var oldCpes []models.NvdCpe
		if err := tx.Model(&olds).Association("Cpes").Find(&oldCpes); err != nil {
			return err
		}
		if err := tx.Model(&oldCpes).Association("EnvCpes").Clear(); err != nil {
			return err
		}

		if err := tx.Session(&gorm.Session{AllowGlobalUpdate: true}).
			Select("Descriptions", "Cvss2", "Cvss3", "Cwes", "Cpes", "Affects", "References", "Certs").
			Delete(olds).Error; err != nil {
			return err
		}
	}

	bar := pb.StartNew(len(cves))
	for _, cve := range cves {
		cve.FeedMetaID = feedMetaID
		if err := tx.Omit("Cpes").Create(&cve).Error; err != nil {
			return fmt.Errorf("Failed to insert. err: %s", err)
		}

		for idx := range chunkSlice(len(cve.Cpes), 10) {
			for i := range cve.Cpes[idx.From:idx.To] {
				cve.Cpes[idx.From:idx.To][i].NvdID = uint(cve.ID)
			}
			if err = tx.Create(cve.Cpes[idx.From:idx.To]).Error; err != nil {
				return fmt.Errorf("Failed to insert. err: %s", err)
			}
		}

		bar.Increment()
	}
	bar.Finish()

	logger.Infof("Refreshed %d Nvds.", len(cves))
	return nil
}

// GetFetchedFeedMeta selects fetchmeta of the year
func (r *RDBDriver) GetFetchedFeedMeta(url string) (*models.FeedMeta, error) {
	meta := models.FeedMeta{}
	m := &models.FeedMeta{
		URL: url,
	}
	err := r.conn.Where(m).First(&meta).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return &meta, nil
}

// GetFetchedFeedMetas selects a list of FeedMeta
func (r *RDBDriver) GetFetchedFeedMetas() ([]models.FeedMeta, error) {
	metas := []models.FeedMeta{}
	err := r.conn.Find(&metas).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return metas, nil
}
