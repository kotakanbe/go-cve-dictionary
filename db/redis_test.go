package db

import (
	"testing"

	"github.com/kotakanbe/go-cve-dictionary/models"
)

func Test_matchCpe(t *testing.T) {
	nvdRangeCpe := models.NvdCpe{
		NvdID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
			VersionStartIncluding: "0.0.1",
			VersionEndIncluding:   "2.0.0",
		},
	}
	nvdNonSemVerCpe := models.NvdCpe{
		NvdID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
			VersionStartIncluding: "hoge",
			VersionEndIncluding:   "hoge",
		},
	}
	jvnCpe := models.JvnCpe{
		JvnID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
		},
	}
	type args struct {
		uri string
		cve *models.CveDetail
	}
	tests := []struct {
		name    string
		args    args
		want    bool
		wantErr bool
	}{
		{
			name: "nvd range match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Nvd: &models.Nvd{
						Cpes: []models.NvdCpe{nvdRangeCpe},
					},
				},
			},
			want:    true,
			wantErr: false,
		},
		{
			name: "nvd range not match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				cve: &models.CveDetail{
					Nvd: &models.Nvd{
						Cpes: []models.NvdCpe{nvdRangeCpe},
					},
				},
			},
			want:    false,
			wantErr: false,
		},
		{
			name: "nvd affect match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Nvd: &models.Nvd{
						Cpes: []models.NvdCpe{nvdNonSemVerCpe},
						Affects: []models.NvdAffect{
							{
								Vendor:  "qualcomm",
								Product: "qcs605_firmware",
								Version: "1.0.0",
							},
						},
					},
				},
			},
			want:    true,
			wantErr: false,
		},
		{
			name: "nvd affects not match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Nvd: &models.Nvd{
						Cpes: []models.NvdCpe{nvdNonSemVerCpe},
						Affects: []models.NvdAffect{
							{
								Vendor:  "qualcomm",
								Product: "qcs605_firmware",
								Version: "1.0.1",
							},
						},
					},
				},
			},
			want:    false,
			wantErr: false,
		},
		{
			name: "jvn match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Jvn: &models.Jvn{
						Cpes: []models.JvnCpe{jvnCpe},
					},
				},
			},
			want:    true,
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				cve: &models.CveDetail{
					Nvd: &models.Nvd{
						Cpes: []models.NvdCpe{nvdRangeCpe},
					},
					Jvn: &models.Jvn{
						Cpes: []models.JvnCpe{jvnCpe},
					},
				},
			},
			want:    false,
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Nvd: &models.Nvd{
						Cpes: []models.NvdCpe{nvdRangeCpe},
					},
					Jvn: &models.Jvn{
						Cpes: []models.JvnCpe{jvnCpe},
					},
				},
			},
			want:    true,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := matchCpe(tt.args.uri, tt.args.cve)
			if (err != nil) != tt.wantErr {
				t.Errorf("matchCpe() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("matchCpe() = %v, want %v", got, tt.want)
			}
		})
	}
}
