package db

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/cheggaaa/pb/v3"
	"github.com/go-redis/redis/v8"
	"github.com/knqyf263/go-cpe/common"
	"github.com/knqyf263/go-cpe/naming"
	"github.com/kotakanbe/go-cve-dictionary/config"
	log "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/models"
	"golang.org/x/xerrors"
)

/**
# Redis Data Structure

- SET
  ┌──────────────────┬──────────┬─────────────────────────────────┐
  │       KEY        │  MEMBER  │             PURPOSE             │
  └──────────────────┴──────────┴─────────────────────────────────┘
  ┌──────────────────┬──────────┬─────────────────────────────────┐
  │CVE#NVD#${CVEID}  │${CVEJSON}│Get CVEJSON by CVEID             │
  ├──────────────────┼──────────┼─────────────────────────────────┤
  │CVE#JVN#${CVEID}  │${CVEJSON}│Get CVEJSON BY CVEID             │
  ├──────────────────┼──────────┼─────────────────────────────────┤
  │CVE#C#NVD#${CVEID}│${CPEJSON}│Get CPEJSON BY CVEID             │
  ├──────────────────┼──────────┼─────────────────────────────────┤
  │CVE#C#JVN#${CVEID}│${CPEJSON}│Get CPEJSON BY CVEID             │
  └──────────────────┴──────────┴─────────────────────────────────┘

- HASH
  ┌──────────────┬──────────┬───────────┬─────────────────────────────────┐
  │     HASH     │  FIELD   │   VALUE   │             PURPOSE             │
  └──────────────┴──────────┴───────────┴─────────────────────────────────┘
  ┌──────────────┬──────────┬───────────┬─────────────────────────────────┐
  │ CVE#Meta#NVD │${URL}    │${METAJSON}│Get FeedMeta BY URL              │
  ├──────────────┼──────────┼───────────┼─────────────────────────────────┤
  │ CVE#Meta#JVN │${URL}    │${METAJSON}│Get FeedMeta BY URL              │
  └──────────────┴──────────┴───────────┴─────────────────────────────────┘

- ZINDEX
  ┌─────────────────────────┬──────────┬─────────────┬─────────────────────────────────────┐
  │       KEY               │  SCORE   │  MEMBER     │             PURPOSE                 │
  └─────────────────────────┴──────────┴─────────────┴─────────────────────────────────────┘
  ┌─────────────────────────┬──────────┬─────────────┬─────────────────────────────────────┐
  │CVE#${Vendor}::${Product}│    0     │[]${CVEID}   │Get related []CVEID by Vendor,Product│
  └─────────────────────────┴──────────┴─────────────┴─────────────────────────────────────┘

**/

const (
	dialectRedis    = "redis"
	hashKeyPrefix   = "CVE#"
	nvdKeyPrefix    = "CVE#NVD#"
	jvnKeyPrefix    = "CVE#JVN#"
	nvdCpeKeyPrefix = "CVE#C#NVD#"
	jvnCpeKeyPrefix = "CVE#C#JVN#"
	feedKeyPrefix   = "CVE#Meta#"
)

// RedisDriver is Driver for Redis
type RedisDriver struct {
	name string
	conn *redis.Client
}

// Name return db name
func (r *RedisDriver) Name() string {
	return r.name
}

// OpenDB opens Database
func (r *RedisDriver) OpenDB(dbType, dbPath string, debugSQL bool) (locked bool, err error) {
	if err = r.connectRedis(dbPath); err != nil {
		err = fmt.Errorf("Failed to open DB. dbtype: %s, dbpath: %s, err: %s", dbType, dbPath, err)
	}
	return
}

func (r *RedisDriver) connectRedis(dbPath string) error {
	ctx := context.Background()
	var err error
	var option *redis.Options
	if option, err = redis.ParseURL(dbPath); err != nil {
		log.Errorf("Failed to parse url. err: %s", err)
		return err
	}
	r.conn = redis.NewClient(option)
	err = r.conn.Ping(ctx).Err()
	return err
}

// CloseDB close Database
func (r *RedisDriver) CloseDB() (err error) {
	if r.conn == nil {
		return
	}
	if err = r.conn.Close(); err != nil {
		return xerrors.Errorf("Failed to close DB. Type: %s. err: %w", r.name, err)
	}
	return
}

// MigrateDB migrates Database
func (r *RedisDriver) MigrateDB() error {
	return nil
}

// IsGoCVEDictModelV1 determines if the DB was created at the time of go-cve-dictionary Model v1
func (r *RedisDriver) IsGoCVEDictModelV1() (bool, error) {
	return false, nil
}

// GetFetchMeta get FetchMeta from Database
func (r *RedisDriver) GetFetchMeta() (*models.FetchMeta, error) {
	return &models.FetchMeta{GoCVEDictRevision: config.Revision, SchemaVersion: models.LatestSchemaVersion}, nil
}

// UpsertFetchMeta upsert FetchMeta to Database
func (r *RedisDriver) UpsertFetchMeta(*models.FetchMeta) error {
	return nil
}

// Get Select Cve information from DB.
func (r *RedisDriver) Get(cveID string) (*models.CveDetail, error) {
	ctx := context.Background()

	detail := models.CveDetail{
		CveID: cveID,
	}
	var cveResult *redis.StringSliceCmd
	if cveResult = r.conn.SMembers(ctx, nvdKeyPrefix+cveID); cveResult.Err() != nil {
		return nil, cveResult.Err()
	}
	c, err := r.unmarshal(cveID, models.NvdType, cveResult)
	if err != nil {
		return nil, err
	}
	detail.Nvd = c.Nvd

	if cveResult = r.conn.SMembers(ctx, jvnKeyPrefix+cveID); cveResult.Err() != nil {
		return nil, cveResult.Err()
	}
	c, err = r.unmarshal(cveID, models.JvnType, cveResult)
	if err != nil {
		return nil, err
	}
	detail.Jvn = c.Jvn

	return &detail, nil
}

// GetMulti Select Cves information from DB.
func (r *RedisDriver) GetMulti(cveIDs []string) (map[string]models.CveDetail, error) {
	cveDetails := map[string]models.CveDetail{}
	for _, cveID := range cveIDs {
		detail, err := r.Get(cveID)
		if err != nil {
			return nil, fmt.Errorf("Failed to Get cve json. err : %s", err)
		}
		cveDetails[cveID] = *detail
	}
	return cveDetails, nil
}

func (r *RedisDriver) unmarshal(cveID, cveType string, cveResult *redis.StringSliceCmd) (*models.CveDetail, error) {
	var err error

	cveDetail := models.CveDetail{}
	switch cveType {
	case models.NvdType:
		nvds := []models.Nvd{}
		for _, cveStr := range cveResult.Val() {
			nvd := models.Nvd{}
			if err = json.Unmarshal([]byte(cveStr), &nvd); err != nil {
				return nil, err
			}

			if nvd.CveID != "" {
				nvds = append(nvds, nvd)
			}
		}

		cveDetail.Nvd = nvds
	case models.JvnType:
		jvns := []models.Jvn{}
		for _, cveStr := range cveResult.Val() {
			jvn := models.Jvn{}
			if err = json.Unmarshal([]byte(cveStr), &jvn); err != nil {
				return nil, err
			}

			if jvn.CveID != "" {
				jvns = append(jvns, jvn)
			}
		}

		cveDetail.Jvn = jvns
	default:
		return nil, xerrors.Errorf("Not Supported cveType: %s", cveType)
	}

	return &cveDetail, nil
}

// GetCveIDsByCpeURI Select Cve Ids by by pseudo-CPE
func (r *RedisDriver) GetCveIDsByCpeURI(uri string) ([]string, []string, error) {
	specified, err := naming.UnbindURI(uri)
	if err != nil {
		return nil, nil, err
	}
	vendor := fmt.Sprintf("%s", specified.Get(common.AttributeVendor))
	product := fmt.Sprintf("%s", specified.Get(common.AttributeProduct))
	key := fmt.Sprintf("%s%s::%s", hashKeyPrefix, vendor, product)

	var result *redis.StringSliceCmd
	if result = r.conn.ZRange(context.Background(), key, 0, -1); result.Err() != nil {
		return nil, nil, result.Err()
	}

	uniqCveIDs := map[string]bool{}
	for _, v := range result.Val() {
		uniqCveIDs[v] = true
	}

	nvdCveIDs := []string{}
	jvnCveIDs := []string{}
	for cveID := range uniqCveIDs {
		d, err := r.Get(cveID)
		if err != nil {
			return nil, nil, err
		}
		nvdMatch, jvnMatch, err := matchCpe(uri, d)
		if err != nil {
			log.Warnf("Failed to compare the version:%s %s %#v",
				err, uri, d)
			// continue matching
			continue
		}
		if nvdMatch {
			nvdCveIDs = append(nvdCveIDs, d.CveID)
		} else if jvnMatch {
			jvnCveIDs = append(jvnCveIDs, d.CveID)
		}
	}
	return nvdCveIDs, jvnCveIDs, nil
}

// GetByCpeURI Select Cve information from DB.
func (r *RedisDriver) GetByCpeURI(uri string) ([]models.CveDetail, error) {
	specified, err := naming.UnbindURI(uri)
	if err != nil {
		return nil, err
	}
	vendor := fmt.Sprintf("%s", specified.Get(common.AttributeVendor))
	product := fmt.Sprintf("%s", specified.Get(common.AttributeProduct))
	key := fmt.Sprintf("%s%s::%s", hashKeyPrefix, vendor, product)

	var result *redis.StringSliceCmd
	if result = r.conn.ZRange(context.Background(), key, 0, -1); result.Err() != nil {
		return nil, result.Err()
	}

	uniqCveIDs := map[string]bool{}
	for _, v := range result.Val() {
		uniqCveIDs[v] = true
	}

	details := []models.CveDetail{}
	for cveID := range uniqCveIDs {
		d, err := r.Get(cveID)
		if err != nil {
			return nil, err
		}
		nvdMatch, jvnMatch, err := matchCpe(uri, d)
		if err != nil {
			log.Warnf("Failed to compare the version:%s %s %#v",
				err, uri, d)
			// continue matching
			continue
		}
		if nvdMatch {
			d.CveIDSource = models.NvdType
		} else if jvnMatch {
			d.CveIDSource = models.JvnType
		}

		if nvdMatch || jvnMatch {
			details = append(details, *d)
		}
	}
	return details, nil
}

// InsertJvn insert items fetched from JVN.
func (r *RedisDriver) InsertJvn(feedMetas []models.FeedMeta, cves map[string][]models.Jvn) error {
	log.Infof("Inserting fetched CVEs...")

	ctx := context.Background()
	var err error
	pipe := r.conn.Pipeline()

	for _, meta := range feedMetas {
		insertCves, ok := cves[meta.Year]
		if !ok {
			return xerrors.Errorf("Failed to get cves[%s].", meta.Year)
		}

		bar := pb.StartNew(len(insertCves))
		for _, cve := range insertCves {
			cpes := append([]models.JvnCpe{}, cve.Cpes...)

			var jj []byte
			if jj, err = json.Marshal(cve); err != nil {
				return fmt.Errorf("Failed to marshal json. err: %s", err)
			}
			key := jvnKeyPrefix + cve.CveID
			if result := pipe.SAdd(ctx, key, string(jj)); result.Err() != nil {
				return fmt.Errorf("Failed to SAdd CVE. err: %s", result.Err())
			}
			if config.Conf.Expire > 0 {
				if err := pipe.Expire(ctx, key, time.Duration(config.Conf.Expire*uint(time.Second))).Err(); err != nil {
					return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
				}
			} else {
				if err := pipe.Persist(ctx, key).Err(); err != nil {
					return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
				}
			}

			for _, cpe := range cpes {
				key := fmt.Sprintf("%s%s::%s", hashKeyPrefix, cpe.Vendor, cpe.Product)
				if result := pipe.ZAdd(
					ctx,
					key,
					&redis.Z{Score: 0, Member: cve.CveID},
				); result.Err() != nil {
					return fmt.Errorf("Failed to ZAdd cpe. err: %s", result.Err())
				}
				if config.Conf.Expire > 0 {
					if err := pipe.Expire(ctx, key, time.Duration(config.Conf.Expire*uint(time.Second))).Err(); err != nil {
						return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
					}
				} else {
					if err := pipe.Persist(ctx, key).Err(); err != nil {
						return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
					}
				}

			}

			var jc []byte
			if jc, err = json.Marshal(cpes); err != nil {
				return fmt.Errorf("Failed to marshal json. err: %s", err)
			}
			key = jvnCpeKeyPrefix + cve.CveID
			if result := pipe.SAdd(ctx, key, string(jc)); result.Err() != nil {
				return fmt.Errorf("Failed to SAdd CPE. err: %s", result.Err())
			}
			if config.Conf.Expire > 0 {
				if err := pipe.Expire(ctx, key, time.Duration(config.Conf.Expire*uint(time.Second))).Err(); err != nil {
					return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
				}
			} else {
				if err := pipe.Persist(ctx, key).Err(); err != nil {
					return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
				}
			}
			bar.Increment()
		}
		bar.Finish()

		log.Infof("Refreshed %d Jvns.", len(insertCves))

		meta.Hash = meta.LatestHash
		meta.LastModifiedDate = meta.LatestLastModifiedDate
		if err := r.upsertFeedHash(meta); err != nil {
			return fmt.Errorf("Failed to upsertFeedHash. err: %s", err)
		}
	}

	if _, err = pipe.Exec(ctx); err != nil {
		return fmt.Errorf("Failed to exec pipeline. err: %s", err)
	}

	return nil
}

// CountNvd count nvd table
func (r *RedisDriver) CountNvd() (int, error) {
	ctx := context.Background()
	var result *redis.StringSliceCmd
	if result = r.conn.Keys(ctx, nvdKeyPrefix+"CVE*"); result.Err() != nil {
		return 0, result.Err()
	}
	return len(result.Val()), nil
}

// InsertNvd Cve information from DB.
func (r *RedisDriver) InsertNvd(feedMetas []models.FeedMeta, cves map[string][]models.Nvd) error {
	log.Infof("Inserting fetched CVEs...")

	ctx := context.Background()
	var err error
	pipe := r.conn.Pipeline()

	for _, meta := range feedMetas {
		insertCves, ok := cves[meta.Year]
		if !ok {
			return xerrors.Errorf("Failed to get cves[%s].", meta.Year)
		}

		bar := pb.StartNew(len(insertCves))
		for _, cve := range insertCves {
			cpes := append([]models.NvdCpe{}, cve.Cpes...)

			var jn []byte
			if jn, err = json.Marshal(cve); err != nil {
				return fmt.Errorf("Failed to marshal json. err: %s", err)
			}
			key := nvdKeyPrefix + cve.CveID
			if result := pipe.SAdd(ctx, key, string(jn)); result.Err() != nil {
				return fmt.Errorf("Failed to SAdd CVE. err: %s", result.Err())
			}
			if config.Conf.Expire > 0 {
				if err := pipe.Expire(ctx, key, time.Duration(config.Conf.Expire*uint(time.Second))).Err(); err != nil {
					return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
				}
			} else {
				if err := pipe.Persist(ctx, key).Err(); err != nil {
					return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
				}
			}

			for _, cpe := range cpes {
				key := fmt.Sprintf("%s%s::%s", hashKeyPrefix, cpe.Vendor, cpe.Product)
				if result := pipe.ZAdd(
					ctx,
					key,
					&redis.Z{Score: 0, Member: cve.CveID},
				); result.Err() != nil {
					return fmt.Errorf("Failed to ZAdd cpe. err: %s", result.Err())
				}
				if config.Conf.Expire > 0 {
					if err := pipe.Expire(ctx, key, time.Duration(config.Conf.Expire*uint(time.Second))).Err(); err != nil {
						return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
					}
				} else {
					if err := pipe.Persist(ctx, key).Err(); err != nil {
						return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
					}
				}
			}

			var jc []byte
			if jc, err = json.Marshal(cpes); err != nil {
				return fmt.Errorf("Failed to marshal json. err: %s", err)
			}
			key = nvdCpeKeyPrefix + cve.CveID
			if result := pipe.SAdd(ctx, key, string(jc)); result.Err() != nil {
				return fmt.Errorf("Failed to SAdd NVD CPE. err: %s", result.Err())
			}
			if config.Conf.Expire > 0 {
				if err := pipe.Expire(ctx, key, time.Duration(config.Conf.Expire*uint(time.Second))).Err(); err != nil {
					return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
				}
			} else {
				if err := pipe.Persist(ctx, key).Err(); err != nil {
					return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
				}
			}
			bar.Increment()
		}
		bar.Finish()

		log.Infof("Refreshed %d Nvds.", len(insertCves))

		meta.Hash = meta.LatestHash
		meta.LastModifiedDate = meta.LatestLastModifiedDate
		if err := r.upsertFeedHash(meta); err != nil {
			return fmt.Errorf("Failed to upsertFeedHash. err: %s", err)
		}
	}

	if _, err = pipe.Exec(ctx); err != nil {
		return fmt.Errorf("Failed to exec pipeline. err: %s", err)
	}

	return nil
}

func (r *RedisDriver) upsertFeedHash(m models.FeedMeta) error {
	ctx := context.Background()
	jn, err := json.Marshal(m)
	if err != nil {
		return fmt.Errorf("Failed to marshal json. err: %s", err)
	}

	var key string
	switch m.Source {
	case models.NvdType:
		key = feedKeyPrefix + "NVD"
	case models.JvnType:
		key = feedKeyPrefix + "JVN"
	default:
		return xerrors.New("Failed to determine Source by URL.")
	}

	pipe := r.conn.Pipeline()
	if result := pipe.HSet(ctx, key, m.URL, jn); result.Err() != nil {
		return fmt.Errorf("Failed to HSet META. err: %s", result.Err())
	}
	if config.Conf.Expire > 0 {
		if err := pipe.Expire(ctx, key, time.Duration(config.Conf.Expire*uint(time.Second))).Err(); err != nil {
			return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
		}
	} else {
		if err := pipe.Persist(ctx, key).Err(); err != nil {
			return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
		}
	}
	if _, err := pipe.Exec(ctx); err != nil {
		return fmt.Errorf("Failed to exec pipeline. err: %s", err)
	}
	return nil
}

// GetFetchedFeedMeta selects hash in metafile of the year
func (r *RedisDriver) GetFetchedFeedMeta(url string) (*models.FeedMeta, error) {
	ctx := context.Background()
	var result *redis.StringCmd
	meta := &models.FeedMeta{URL: url}

	switch meta.GetSourceByURL() {
	case models.NvdType:
		result = r.conn.HGet(ctx, feedKeyPrefix+"NVD", url)
	case models.JvnType:
		result = r.conn.HGet(ctx, feedKeyPrefix+"JVN", url)
	default:
		return nil, xerrors.New("Failed to determine Source by URL.")
	}

	if result.Val() != "" {
		if err := json.Unmarshal([]byte(result.Val()), meta); err != nil {
			return nil, err
		}
	}

	return meta, nil
}

// GetFetchedFeedMetas selects a list of FeedMeta
func (r *RedisDriver) GetFetchedFeedMetas() (metas []models.FeedMeta, err error) {
	ctx := context.Background()
	var result *redis.StringStringMapCmd
	if result = r.conn.HGetAll(ctx, feedKeyPrefix+"NVD"); result.Err() != nil {
		return nil, result.Err()
	}
	for _, s := range result.Val() {
		m := models.FeedMeta{}
		if err := json.Unmarshal([]byte(s), &m); err != nil {
			return nil, err
		}
		metas = append(metas, m)
	}

	if result = r.conn.HGetAll(ctx, feedKeyPrefix+"JVN"); result.Err() != nil {
		return nil, result.Err()
	}
	for _, s := range result.Val() {
		m := models.FeedMeta{}
		if err := json.Unmarshal([]byte(s), &m); err != nil {
			return nil, err
		}
		metas = append(metas, m)
	}
	return
}
