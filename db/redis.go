package db

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"time"

	"github.com/cheggaaa/pb/v3"
	"github.com/go-redis/redis/v8"
	"github.com/knqyf263/go-cpe/common"
	"github.com/knqyf263/go-cpe/naming"
	"github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/kotakanbe/go-cve-dictionary/fetcher/jvn"
	"github.com/kotakanbe/go-cve-dictionary/fetcher/nvd"
	log "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/models"
	"github.com/spf13/viper"
	"golang.org/x/xerrors"
)

/**
# Redis Data Structure

- Sets
  ┌─────────────────────────────────────────┬──────────────────────┬───────────────────────────────────────────────────┐
  │                  KEY                    │        MEMBER        │                      PURPOSE                      │
  └─────────────────────────────────────────┴──────────────────────┴───────────────────────────────────────────────────┘
  ┌─────────────────────────────────────────┬──────────────────────┬───────────────────────────────────────────────────┐
  │ CVE#CPE#${${part}#${vendor}#${product}} │ CVEID                │ Get Strings Key BY CPE URI                        │
  └─────────────────────────────────────────┴──────────────────────┴───────────────────────────────────────────────────┘

- Hash
  ┌──────────────────┬───────────────┬─────────────┬──────────────────────────────────────────────────┐
  │     HASH         │      FIELD    │    VALUE    │             PURPOSE                              │
  └──────────────────┴───────────────┴─────────────┴──────────────────────────────────────────────────┘
  ┌──────────────────┬───────────────┬─────────────┬──────────────────────────────────────────────────┐
  │ CVE#CVE#${CVEID} │ NVD/${JVNID}  │ ${CVEJSON}  │ Get CVEJSON by CVEID                             │
  ├──────────────────┼───────────────┼─────────────┼──────────────────────────────────────────────────┤
  │ CVE#DEP          │ NVD/JVN       │    JSON     │ TO DELETE OUTDATED AND UNNEEDED FIELD AND MEMBER │
  ├──────────────────┼───────────────┼─────────────┼──────────────────────────────────────────────────┤
  │ CVE#Meta#NVD     │ ${URL}        │ ${METAJSON} │ Get FeedMeta BY URL                              │
  ├──────────────────┼───────────────┼─────────────┼──────────────────────────────────────────────────┤
  │ CVE#Meta#JVN     │ ${URL}        │ ${METAJSON} │ Get FeedMeta BY URL                              │
  ├──────────────────┼───────────────┼─────────────┼──────────────────────────────────────────────────┤
  │ CVE#FETCHMETA    │ Revision      │ string      │ Get Go-Cve-Dictionary Binary Revision            │
  ├──────────────────┼───────────────┼─────────────┼──────────────────────────────────────────────────┤
  │ CVE#FETCHMETA    │ SchemaVersion │ uint        │ Get Go-Cve-Dictionary Schema Version             │
  └──────────────────┴───────────────┴─────────────┴──────────────────────────────────────────────────┘

**/

const (
	dialectRedis  = "redis"
	cveKeyFormat  = "CVE#CVE#%s"
	cpeKeyFormat  = "CVE#CPE#%s"
	depKey        = "CVE#DEP"
	feedKeyFormat = "CVE#Meta#%s"
	fetchMetaKey  = "CVE#FETCHMETA"
)

// RedisDriver is Driver for Redis
type RedisDriver struct {
	name string
	conn *redis.Client
}

// Name return db name
func (r *RedisDriver) Name() string {
	return r.name
}

// OpenDB opens Database
func (r *RedisDriver) OpenDB(dbType, dbPath string, debugSQL bool) (locked bool, err error) {
	if err = r.connectRedis(dbPath); err != nil {
		err = fmt.Errorf("Failed to open DB. dbtype: %s, dbpath: %s, err: %s", dbType, dbPath, err)
	}
	return
}

func (r *RedisDriver) connectRedis(dbPath string) error {
	ctx := context.Background()
	var err error
	var option *redis.Options
	if option, err = redis.ParseURL(dbPath); err != nil {
		log.Errorf("Failed to parse url. err: %s", err)
		return err
	}
	r.conn = redis.NewClient(option)
	return r.conn.Ping(ctx).Err()
}

// CloseDB close Database
func (r *RedisDriver) CloseDB() (err error) {
	if r.conn == nil {
		return
	}
	if err = r.conn.Close(); err != nil {
		return xerrors.Errorf("Failed to close DB. Type: %s. err: %w", r.name, err)
	}
	return
}

// MigrateDB migrates Database
func (r *RedisDriver) MigrateDB() error {
	return nil
}

// IsGoCVEDictModelV1 determines if the DB was created at the time of go-cve-dictionary Model v1
func (r *RedisDriver) IsGoCVEDictModelV1() (bool, error) {
	ctx := context.Background()

	exists, err := r.conn.Exists(ctx, fetchMetaKey).Result()
	if err != nil {
		return false, fmt.Errorf("Failed to Exists. err: %s", err)
	}
	if exists == 0 {
		key, err := r.conn.RandomKey(ctx).Result()
		if err != nil {
			if errors.Is(err, redis.Nil) {
				return false, nil
			}
			return false, fmt.Errorf("Failed to RandomKey. err: %s", err)
		}
		if key != "" {
			return true, nil
		}
	}

	return false, nil
}

// GetFetchMeta get FetchMeta from Database
func (r *RedisDriver) GetFetchMeta() (*models.FetchMeta, error) {
	ctx := context.Background()

	exists, err := r.conn.Exists(ctx, fetchMetaKey).Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to Exists. err: %s", err)
	}
	if exists == 0 {
		return &models.FetchMeta{GoCVEDictRevision: config.Revision, SchemaVersion: models.LatestSchemaVersion}, nil
	}

	revision, err := r.conn.HGet(ctx, fetchMetaKey, "Revision").Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to HGet Revision. err: %s", err)
	}

	verstr, err := r.conn.HGet(ctx, fetchMetaKey, "SchemaVersion").Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to HGet SchemaVersion. err: %s", err)
	}
	version, err := strconv.ParseUint(verstr, 10, 8)
	if err != nil {
		return nil, fmt.Errorf("Failed to ParseUint. err: %s", err)
	}

	return &models.FetchMeta{GoCVEDictRevision: revision, SchemaVersion: uint(version)}, nil
}

// UpsertFetchMeta upsert FetchMeta to Database
func (r *RedisDriver) UpsertFetchMeta(fetchMeta *models.FetchMeta) error {
	return r.conn.HSet(context.Background(), fetchMetaKey, map[string]interface{}{"Revision": fetchMeta.GoCVEDictRevision, "SchemaVersion": fetchMeta.SchemaVersion}).Err()
}

// Get Select Cve information from DB.
func (r *RedisDriver) Get(cveID string) (*models.CveDetail, error) {
	ctx := context.Background()

	detail := models.CveDetail{
		CveID: cveID,
		Nvds:  []models.Nvd{},
		Jvns:  []models.Jvn{},
	}

	results, err := r.conn.HGetAll(ctx, fmt.Sprintf(cveKeyFormat, cveID)).Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to HGetAll. err: %s", err)
	}

	if jsonStr, ok := results[models.NvdType]; ok {
		var nvd models.Nvd
		if err := json.Unmarshal([]byte(jsonStr), &nvd); err != nil {
			return nil, fmt.Errorf("Failed to Unmarshal JSON. err: %s", err)
		}
		detail.Nvds = append(detail.Nvds, nvd)
		delete(results, models.NvdType)
	}

	for _, jsonStr := range results {
		var jvn models.Jvn
		if err := json.Unmarshal([]byte(jsonStr), &jvn); err != nil {
			return nil, fmt.Errorf("Failed to Unmarshal JSON. err: %s", err)
		}
		detail.Jvns = append(detail.Jvns, jvn)
	}

	return &detail, nil
}

// GetMulti Select Cves information from DB.
func (r *RedisDriver) GetMulti(cveIDs []string) (map[string]models.CveDetail, error) {
	cveDetails := map[string]models.CveDetail{}
	for _, cveID := range cveIDs {
		detail, err := r.Get(cveID)
		if err != nil {
			return nil, fmt.Errorf("Failed to Get cve json. err : %s", err)
		}
		cveDetails[cveID] = *detail
	}
	return cveDetails, nil
}

// GetCveIDsByCpeURI Select Cve Ids by by pseudo-CPE
func (r *RedisDriver) GetCveIDsByCpeURI(uri string) ([]string, []string, error) {
	ctx := context.Background()

	specified, err := naming.UnbindURI(uri)
	if err != nil {
		return nil, nil, err
	}
	cpeKey := fmt.Sprintf(cpeKeyFormat, fmt.Sprintf("%s#%s#%s", specified.Get(common.AttributePart), specified.Get(common.AttributeVendor), specified.Get(common.AttributeProduct)))

	cveIDs, err := r.conn.SMembers(ctx, cpeKey).Result()
	if err != nil {
		return nil, nil, fmt.Errorf("Failed to SMembers. err: %s", err)
	}

	nvdCveIDs := []string{}
	jvnCveIDs := []string{}
	for _, cveID := range cveIDs {
		d, err := r.Get(cveID)
		if err != nil {
			return nil, nil, err
		}
		if err := filterCveDetailByCpeURI(uri, d); err != nil {
			return nil, nil, err
		}
		nvdMatch, jvnMatch, err := matchCpe(uri, d)
		if err != nil {
			log.Warnf("Failed to compare the version:%s %s %#v", err, uri, d)
			// continue matching
			continue
		}
		if nvdMatch {
			nvdCveIDs = append(nvdCveIDs, d.CveID)
		} else if jvnMatch {
			jvnCveIDs = append(jvnCveIDs, d.CveID)
		}
	}

	return nvdCveIDs, jvnCveIDs, nil
}

// GetByCpeURI Select Cve information from DB.
func (r *RedisDriver) GetByCpeURI(uri string) ([]models.CveDetail, error) {
	ctx := context.Background()

	specified, err := naming.UnbindURI(uri)
	if err != nil {
		return nil, err
	}
	cpeKey := fmt.Sprintf(cpeKeyFormat, fmt.Sprintf("%s#%s#%s", specified.Get(common.AttributePart), specified.Get(common.AttributeVendor), specified.Get(common.AttributeProduct)))

	cveIDs, err := r.conn.SMembers(ctx, cpeKey).Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to SMembers. err: %s", err)
	}

	details := []models.CveDetail{}
	for _, cveID := range cveIDs {
		d, err := r.Get(cveID)
		if err != nil {
			return nil, err
		}
		if err := filterCveDetailByCpeURI(uri, d); err != nil {
			return nil, err
		}
		if len(d.Nvds) > 0 || len(d.Jvns) > 0 {
			details = append(details, *d)
		}
	}

	return details, nil
}

// CountJvn count jvn table
func (r *RedisDriver) CountJvn() (int, error) {
	ctx := context.Background()

	depstr, err := r.conn.HGet(ctx, depKey, models.JvnType).Result()
	if err != nil {
		if errors.Is(err, redis.Nil) {
			return 0, nil
		}
		return 0, err
	}

	// deps: {"JVNID": {"CVEID": {"part#vendor#product": {}}}}
	var deps map[string]map[string]struct{}
	if err := json.Unmarshal([]byte(depstr), &deps); err != nil {
		return 0, fmt.Errorf("Failed to unmarshal JSON. err: %s", err)
	}

	return len(deps), nil
}

// InsertJvn insert items fetched from JVN.
func (r *RedisDriver) InsertJvn(feedMetas map[string]models.FeedMeta) error {
	ctx := context.Background()
	expire := viper.GetUint("expire")
	batchSize := viper.GetInt("batch-size")
	if batchSize < 1 {
		return fmt.Errorf("Failed to set batch-size. err: batch-size option is not set properly")
	}
	var err error

	// {"year", "recent" or "modified": { "JVNID#CVE-ID":Jvn{} } }
	uniqCves := map[string]map[string]models.Jvn{}

	log.Infof("Fetching CVE information from JVN(recent, modified).")
	if err := jvn.FetchConvert(uniqCves, []models.FeedMeta{feedMetas["recent"], feedMetas["modified"]}); err != nil {
		return fmt.Errorf("Failed to FetchConvert. err: %s", err)
	}
	delete(feedMetas, "recent")
	delete(feedMetas, "modified")

	// newDeps, oldDeps: {"JVNID": {"CVEID": {"part#vendor#product": {}}}}
	newDeps := map[string]map[string]map[string]struct{}{}
	oldDepsStr, err := r.conn.HGet(ctx, depKey, "JVN").Result()
	if err != nil {
		if !errors.Is(err, redis.Nil) {
			return fmt.Errorf("Failed to Get key: %s. err: %s", depKey, err)
		}
		oldDepsStr = "{}"
	}
	var oldDeps map[string]map[string]map[string]struct{}
	if err := json.Unmarshal([]byte(oldDepsStr), &oldDeps); err != nil {
		return fmt.Errorf("Failed to unmarshal JSON. err: %s", err)
	}

	for _, meta := range feedMetas {
		log.Infof("Fetching CVE information from JVN(%s).", meta.Year)
		if err := jvn.FetchConvert(uniqCves, []models.FeedMeta{meta}); err != nil {
			return fmt.Errorf("Failed to FetchConvert. err: %s", err)
		}
		delete(feedMetas, meta.Year)

		cves := []models.Jvn{}
		for _, cve := range uniqCves[meta.Year] {
			cves = append(cves, cve)
		}
		delete(uniqCves, meta.Year)

		log.Infof("Inserting fetched CVEs(%s)...", meta.Year)
		bar := pb.StartNew(len(cves))
		for idx := range chunkSlice(len(cves), batchSize) {
			pipe := r.conn.Pipeline()
			for _, cve := range cves[idx.From:idx.To] {
				var jn []byte
				if jn, err = json.Marshal(cve); err != nil {
					return fmt.Errorf("Failed to marshal json. err: %s", err)
				}

				cveKey := fmt.Sprintf(cveKeyFormat, cve.CveID)
				if err := pipe.HSet(ctx, cveKey, cve.JvnID, string(jn)).Err(); err != nil {
					return fmt.Errorf("Failed to HSet CVE JSON. err: %s", err)
				}
				if expire > 0 {
					if err := pipe.Expire(ctx, cveKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
						return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
					}
				} else {
					if err := pipe.Persist(ctx, cveKey).Err(); err != nil {
						return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
					}
				}

				if _, ok := newDeps[cve.JvnID]; !ok {
					newDeps[cve.JvnID] = map[string]map[string]struct{}{}
				}
				if _, ok := newDeps[cve.JvnID][cve.CveID]; !ok {
					newDeps[cve.JvnID][cve.CveID] = map[string]struct{}{}
				}

				for _, cpe := range cve.Cpes {
					cpePartVendorProductStr := fmt.Sprintf("%s#%s#%s", cpe.Part, cpe.Vendor, cpe.Product)
					cpeKey := fmt.Sprintf(cpeKeyFormat, cpePartVendorProductStr)
					if err := pipe.SAdd(ctx, cpeKey, cve.CveID).Err(); err != nil {
						return fmt.Errorf("Failed to SAdd CPE key. err: %s", err)
					}
					if expire > 0 {
						if err := pipe.Expire(ctx, cpeKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
							return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
						}
					} else {
						if err := pipe.Persist(ctx, cpeKey).Err(); err != nil {
							return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
						}
					}

					newDeps[cve.JvnID][cve.CveID][cpePartVendorProductStr] = struct{}{}
					if _, ok := oldDeps[cve.JvnID]; ok {
						if _, ok := oldDeps[cve.JvnID][cve.CveID]; ok {
							delete(oldDeps[cve.JvnID][cve.CveID], cpePartVendorProductStr)
							if len(oldDeps[cve.JvnID][cve.CveID]) == 0 {
								delete(oldDeps[cve.JvnID], cve.CveID)
							}
						}
					}
				}
				if _, ok := oldDeps[cve.JvnID]; ok {
					if len(oldDeps[cve.JvnID]) == 0 {
						delete(oldDeps, cve.JvnID)
					}
				}
			}
			if _, err = pipe.Exec(ctx); err != nil {
				return fmt.Errorf("Failed to exec pipeline. err: %s", err)
			}
			bar.Add(idx.To - idx.From)
		}
		bar.Finish()
		log.Infof("Refreshed %d CVEs.", len(cves))
	}

	pipe := r.conn.Pipeline()
	for jvnID, cves := range oldDeps {
		for cveID, cpes := range cves {
			for cpePartVendorProductStr := range cpes {
				if err := pipe.SRem(ctx, fmt.Sprintf(cpeKeyFormat, cpePartVendorProductStr), cveID).Err(); err != nil {
					return fmt.Errorf("Failed to SRem. err: %s", err)
				}
			}

			if _, ok := newDeps[jvnID]; !ok {
				if _, ok := newDeps[jvnID][cveID]; !ok {
					if err := pipe.HDel(ctx, fmt.Sprintf(cveKeyFormat, cveID), jvnID).Err(); err != nil {
						return fmt.Errorf("Failed to HDel. err: %s", err)
					}
				}
			}
		}
	}
	newDepsJSON, err := json.Marshal(newDeps)
	if err != nil {
		return fmt.Errorf("Failed to Marshal JSON. err: %s", err)
	}
	if err := pipe.HSet(ctx, depKey, string(newDepsJSON), models.JvnType).Err(); err != nil {
		return fmt.Errorf("Failed to Set depkey. err: %s", err)
	}
	if expire > 0 {
		if err := pipe.Expire(ctx, depKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
			return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
		}
	} else {
		if err := pipe.Persist(ctx, depKey).Err(); err != nil {
			return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
		}
	}
	if _, err = pipe.Exec(ctx); err != nil {
		return fmt.Errorf("Failed to exec pipeline. err: %s", err)
	}

	if err := r.upsertFeedMetas(feedMetas); err != nil {
		return fmt.Errorf("Failed to upsertFeedMetas. err: %s", err)
	}

	return nil
}

// CountNvd count nvd table
func (r *RedisDriver) CountNvd() (int, error) {
	ctx := context.Background()

	depstr, err := r.conn.HGet(ctx, depKey, models.NvdType).Result()
	if err != nil {
		if errors.Is(err, redis.Nil) {
			return 0, nil
		}
		return 0, err
	}

	// deps: {"CVEID": {"part#vendor#product": {}}}
	var deps map[string]map[string]struct{}
	if err := json.Unmarshal([]byte(depstr), &deps); err != nil {
		return 0, fmt.Errorf("Failed to unmarshal JSON. err: %s", err)
	}

	return len(deps), nil
}

// InsertNvd Cve information from DB.
func (r *RedisDriver) InsertNvd(feedMetas map[string]models.FeedMeta) error {
	ctx := context.Background()
	expire := viper.GetUint("expire")
	batchSize := viper.GetInt("batch-size")
	if batchSize < 1 {
		return fmt.Errorf("Failed to set batch-size. err: batch-size option is not set properly")
	}
	var err error

	// {"year", "recent" or "modified": { "CVE-ID": Nvd{} } }
	uniqCves := map[string]map[string]models.Nvd{}

	log.Infof("Fetching CVE information from NVD(recent, modified).")
	if err := nvd.FetchConvert(uniqCves, []models.FeedMeta{feedMetas["recent"], feedMetas["modified"]}); err != nil {
		return fmt.Errorf("Failed to FetchConvert. err: %s", err)
	}
	delete(feedMetas, "recent")
	delete(feedMetas, "modified")

	// newDeps, oldDeps: {"CVEID": {"part#vendor#product": {}}}
	newDeps := map[string]map[string]struct{}{}
	oldDepsStr, err := r.conn.HGet(ctx, depKey, models.NvdType).Result()
	if err != nil {
		if !errors.Is(err, redis.Nil) {
			return fmt.Errorf("Failed to Get key: %s. err: %s", depKey, err)
		}
		oldDepsStr = "{}"
	}
	var oldDeps map[string]map[string]struct{}
	if err := json.Unmarshal([]byte(oldDepsStr), &oldDeps); err != nil {
		return fmt.Errorf("Failed to unmarshal JSON. err: %s", err)
	}

	for _, meta := range feedMetas {
		log.Infof("Fetching CVE information from NVD(%s).", meta.Year)
		if err := nvd.FetchConvert(uniqCves, []models.FeedMeta{meta}); err != nil {
			return fmt.Errorf("Failed to FetchConvert. err: %s", err)
		}
		delete(feedMetas, meta.Year)

		cves := []models.Nvd{}
		for _, cve := range uniqCves[meta.Year] {
			cves = append(cves, cve)
		}
		delete(uniqCves, meta.Year)

		log.Infof("Inserting fetched CVEs(%s)...", meta.Year)
		bar := pb.StartNew(len(cves))
		for idx := range chunkSlice(len(cves), batchSize) {
			pipe := r.conn.Pipeline()
			for _, cve := range cves[idx.From:idx.To] {
				var jn []byte
				if jn, err = json.Marshal(cve); err != nil {
					return fmt.Errorf("Failed to marshal json. err: %s", err)
				}

				cveKey := fmt.Sprintf(cveKeyFormat, cve.CveID)
				if err := pipe.HSet(ctx, cveKey, models.NvdType, string(jn)).Err(); err != nil {
					return fmt.Errorf("Failed to HSet CVE JSON. err: %s", err)
				}
				if expire > 0 {
					if err := pipe.Expire(ctx, cveKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
						return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
					}
				} else {
					if err := pipe.Persist(ctx, cveKey).Err(); err != nil {
						return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
					}
				}

				if _, ok := newDeps[cve.CveID]; !ok {
					newDeps[cve.CveID] = map[string]struct{}{}
				}

				for _, cpe := range cve.Cpes {
					cpePartVendorProductStr := fmt.Sprintf("%s#%s#%s", cpe.Part, cpe.Vendor, cpe.Product)
					cpeKey := fmt.Sprintf(cpeKeyFormat, cpePartVendorProductStr)
					if err := pipe.SAdd(ctx, cpeKey, cve.CveID).Err(); err != nil {
						return fmt.Errorf("Failed to SAdd CPE key. err: %s", err)
					}
					if expire > 0 {
						if err := pipe.Expire(ctx, cpeKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
							return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
						}
					} else {
						if err := pipe.Persist(ctx, cpeKey).Err(); err != nil {
							return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
						}
					}

					newDeps[cve.CveID][cpePartVendorProductStr] = struct{}{}
					if _, ok := oldDeps[cve.CveID]; ok {
						delete(oldDeps[cve.CveID], cpePartVendorProductStr)
					}
				}
				if _, ok := oldDeps[cve.CveID]; ok {
					if len(oldDeps[cve.CveID]) == 0 {
						delete(oldDeps, cve.CveID)
					}
				}
			}
			if _, err = pipe.Exec(ctx); err != nil {
				return fmt.Errorf("Failed to exec pipeline. err: %s", err)
			}
			bar.Add(idx.To - idx.From)
		}
		bar.Finish()
		log.Infof("Refreshed %d CVEs.", len(cves))
	}

	pipe := r.conn.Pipeline()
	for cveID, cpes := range oldDeps {
		for cpePartVendorProductStr := range cpes {
			if err := pipe.SRem(ctx, fmt.Sprintf(cpeKeyFormat, cpePartVendorProductStr), cveID).Err(); err != nil {
				return fmt.Errorf("Failed to SRem. err: %s", err)
			}
		}

		if _, ok := newDeps[cveID]; !ok {
			if err := pipe.HDel(ctx, fmt.Sprintf(cveKeyFormat, cveID), models.NvdType).Err(); err != nil {
				return fmt.Errorf("Failed to HDel. err: %s", err)
			}
		}
	}
	newDepsJSON, err := json.Marshal(newDeps)
	if err != nil {
		return fmt.Errorf("Failed to Marshal JSON. err: %s", err)
	}
	if err := pipe.HSet(ctx, depKey, string(newDepsJSON), models.NvdType).Err(); err != nil {
		return fmt.Errorf("Failed to HSet depkey. err: %s", err)
	}
	if expire > 0 {
		if err := pipe.Expire(ctx, depKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
			return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
		}
	} else {
		if err := pipe.Persist(ctx, depKey).Err(); err != nil {
			return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
		}
	}
	if _, err = pipe.Exec(ctx); err != nil {
		return fmt.Errorf("Failed to exec pipeline. err: %s", err)
	}

	if err := r.upsertFeedMetas(feedMetas); err != nil {
		return fmt.Errorf("Failed to upsertFeedMetas. err: %s", err)
	}

	return nil
}

func (r *RedisDriver) upsertFeedMetas(feedMetas map[string]models.FeedMeta) error {
	ctx := context.Background()
	expire := viper.GetUint("expire")
	pipe := r.conn.Pipeline()

	for _, meta := range feedMetas {
		meta.Hash = meta.LatestHash
		meta.LastModifiedDate = meta.LatestLastModifiedDate
		jn, err := json.Marshal(meta)
		if err != nil {
			return fmt.Errorf("Failed to marshal json. err: %s", err)
		}

		var key string
		switch meta.Source {
		case models.NvdType:
			key = fmt.Sprintf(feedKeyFormat, models.NvdType)
		case models.JvnType:
			key = fmt.Sprintf(feedKeyFormat, models.JvnType)
		default:
			return xerrors.New("Failed to determine Source by URL.")
		}

		if err := pipe.HSet(ctx, key, meta.URL, jn).Err(); err != nil {
			return fmt.Errorf("Failed to HSet META. err: %s", err)
		}
		if expire > 0 {
			if err := pipe.Expire(ctx, key, time.Duration(expire*uint(time.Second))).Err(); err != nil {
				return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
			}
		} else {
			if err := pipe.Persist(ctx, key).Err(); err != nil {
				return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
			}
		}
	}

	if _, err := pipe.Exec(ctx); err != nil {
		return fmt.Errorf("Failed to exec pipeline. err: %s", err)
	}
	return nil
}

// GetFetchedFeedMeta selects hash in metafile of the year
func (r *RedisDriver) GetFetchedFeedMeta(url string) (*models.FeedMeta, error) {
	ctx := context.Background()
	var result *redis.StringCmd
	meta := &models.FeedMeta{URL: url}

	switch meta.GetSourceByURL() {
	case models.NvdType:
		result = r.conn.HGet(ctx, fmt.Sprintf(feedKeyFormat, models.NvdType), url)
	case models.JvnType:
		result = r.conn.HGet(ctx, fmt.Sprintf(feedKeyFormat, models.JvnType), url)
	default:
		return nil, xerrors.New("Failed to determine Source by URL.")
	}

	if result.Val() != "" {
		if err := json.Unmarshal([]byte(result.Val()), meta); err != nil {
			return nil, err
		}
	}

	return meta, nil
}

// GetFetchedFeedMetas selects a list of FeedMeta
func (r *RedisDriver) GetFetchedFeedMetas() (metas []models.FeedMeta, err error) {
	ctx := context.Background()
	var result *redis.StringStringMapCmd
	if result = r.conn.HGetAll(ctx, fmt.Sprintf(feedKeyFormat, models.NvdType)); result.Err() != nil {
		return nil, result.Err()
	}
	for _, s := range result.Val() {
		m := models.FeedMeta{}
		if err := json.Unmarshal([]byte(s), &m); err != nil {
			return nil, err
		}
		metas = append(metas, m)
	}

	if result = r.conn.HGetAll(ctx, fmt.Sprintf(feedKeyFormat, models.JvnType)); result.Err() != nil {
		return nil, result.Err()
	}
	for _, s := range result.Val() {
		m := models.FeedMeta{}
		if err := json.Unmarshal([]byte(s), &m); err != nil {
			return nil, err
		}
		metas = append(metas, m)
	}
	return
}
