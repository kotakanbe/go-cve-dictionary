package fetcher

import (
	"bytes"
	"compress/gzip"
	"crypto/tls"
	"io/ioutil"
	"net/http"
	"net/url"

	"github.com/htcat/htcat"
	"github.com/spf13/viper"
	"github.com/vulsio/go-cve-dictionary/log"
	"golang.org/x/xerrors"
)

//FetchFeedFile fetches vulnerability feed file concurrently
func FetchFeedFile(urlstr string, gzip bool) ([]byte, error) {
	log.Infof("Fetching... %s", urlstr)
	body, err := fetchFile(urlstr, gzip, viper.GetInt("htcat-size"))
	if err != nil {
		return nil, xerrors.Errorf("Failed to fetch file. err: %w", err)
	}
	return body, nil
}

func fetchFile(urlstr string, isGzip bool, parallelism int) (body []byte, err error) {
	var proxyURL *url.URL
	httpClient := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
	}
	if viper.GetString("http-proxy") != "" {
		if proxyURL, err = url.Parse(viper.GetString("http-proxy")); err != nil {
			return nil, xerrors.Errorf("Failed to parse proxy url: %w", err)
		}
		httpClient = &http.Client{
			Transport: &http.Transport{
				Proxy:           http.ProxyURL(proxyURL),
				TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
			},
		}
	}

	u, err := url.Parse(urlstr)
	if err != nil {
		return nil, xerrors.Errorf("aborting: could not parse given URL: %w", err)
	}
	buf := bytes.Buffer{}
	htc := htcat.New(httpClient, u, parallelism)
	if _, err := htc.WriteTo(&buf); err != nil {
		return nil, xerrors.Errorf("aborting: could not write to output stream: %w", err)
	}

	if isGzip {
		reader, err := gzip.NewReader(bytes.NewReader(buf.Bytes()))
		defer func() {
			if reader != nil {
				_ = reader.Close()
			}
		}()
		if err != nil {
			return nil, xerrors.Errorf(
				"Failed to decompress NVD feedfile. url: %s, err: %w", urlstr, err)
		}

		bytes, err := ioutil.ReadAll(reader)
		if err != nil {
			return nil, xerrors.Errorf("Failed to Read NVD feedfile. url: %s, err: %w", urlstr, err)
		}
		return bytes, nil
	}

	return buf.Bytes(), nil
}
