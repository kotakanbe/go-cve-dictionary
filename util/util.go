package util

import (
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"runtime"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	log "github.com/kotakanbe/go-cve-dictionary/log"
)

// GenWorkers generate workders
func GenWorkers(num int) chan<- func() {
	tasks := make(chan func())
	for i := 0; i < num; i++ {
		go func() {
			for f := range tasks {
				f()
			}
		}()
	}
	return tasks
}

// GetDefaultLogDir returns default log directory
func GetDefaultLogDir() string {
	defaultLogDir := "/var/log/vuls"
	if runtime.GOOS == "windows" {
		defaultLogDir = filepath.Join(os.Getenv("APPDATA"), "vuls")
	}
	return defaultLogDir
}

// GetFileSize returns download size
func GetFileSize(targetURL string) int {
	var proxyURL *url.URL
	var resp *http.Response
	var err error

	httpCilent := &http.Client{}
	if c.Conf.HTTPProxy != "" {
		if proxyURL, err = url.Parse(c.Conf.HTTPProxy); err != nil {
			return 0
		}
		httpCilent = &http.Client{Transport: &http.Transport{Proxy: http.ProxyURL(proxyURL)}}
	}

	if resp, err = httpCilent.Head(targetURL); err != nil {
		return 0
	}
	defer resp.Body.Close()

	if resp.Header.Get("Accept-Ranges") != "bytes" {
		log.Warn("Not supported range access.")
	}

	// the value -1 indicates that the length is unknown.
	if resp.ContentLength <= 0 {
		log.Info("Failed to get content length.")
		return 0
	}
	return int(resp.ContentLength)
}
